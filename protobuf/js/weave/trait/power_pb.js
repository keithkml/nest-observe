// source: weave/trait/power.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var weave_common_pb = require('../../weave/common_pb.js');
goog.object.extend(proto, weave_common_pb);
goog.exportSymbol('proto.weave.trait.power.BatteryPowerSourceTrait', null, global);
goog.exportSymbol('proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent', null, global);
goog.exportSymbol('proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining', null, global);
goog.exportSymbol('proto.weave.trait.power.BatteryPowerSourceTrait.BatteryReplacementIndicator', null, global);
goog.exportSymbol('proto.weave.trait.power.PowerSourceCapabilitiesTrait', null, global);
goog.exportSymbol('proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceCurrentType', null, global);
goog.exportSymbol('proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType', null, global);
goog.exportSymbol('proto.weave.trait.power.PowerSourceTrait', null, global);
goog.exportSymbol('proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent', null, global);
goog.exportSymbol('proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition', null, global);
goog.exportSymbol('proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.trait.power.PowerSourceCapabilitiesTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.trait.power.PowerSourceCapabilitiesTrait.displayName = 'proto.weave.trait.power.PowerSourceCapabilitiesTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.trait.power.PowerSourceTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.trait.power.PowerSourceTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.trait.power.PowerSourceTrait.displayName = 'proto.weave.trait.power.PowerSourceTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.displayName = 'proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.trait.power.BatteryPowerSourceTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.trait.power.BatteryPowerSourceTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.trait.power.BatteryPowerSourceTrait.displayName = 'proto.weave.trait.power.BatteryPowerSourceTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.displayName = 'proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.displayName = 'proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.trait.power.PowerSourceCapabilitiesTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: (f = msg.getDescription()) && weave_common_pb.StringRef.toObject(includeInstance, f),
    nominalvoltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    maximumcurrent: (f = msg.getMaximumcurrent()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    currenttype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    order: jspb.Message.getFieldWithDefault(msg, 6, 0),
    removable: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.trait.power.PowerSourceCapabilitiesTrait;
  return proto.weave.trait.power.PowerSourceCapabilitiesTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new weave_common_pb.StringRef;
      reader.readMessage(value,weave_common_pb.StringRef.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNominalvoltage(value);
      break;
    case 4:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setMaximumcurrent(value);
      break;
    case 5:
      var value = /** @type {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceCurrentType} */ (reader.readEnum());
      msg.setCurrenttype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrder(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemovable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.trait.power.PowerSourceCapabilitiesTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      weave_common_pb.StringRef.serializeBinaryToWriter
    );
  }
  f = message.getNominalvoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getMaximumcurrent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getCurrenttype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getRemovable();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType = {
  POWER_SOURCE_TYPE_UNSPECIFIED: 0,
  POWER_SOURCE_TYPE_BATTERY: 1
};

/**
 * @enum {number}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceCurrentType = {
  POWER_SOURCE_CURRENT_TYPE_UNSPECIFIED: 0,
  POWER_SOURCE_CURRENT_TYPE_DC: 1,
  POWER_SOURCE_CURRENT_TYPE_AC: 2
};

/**
 * optional PowerSourceType type = 1;
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.getType = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType} value
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} returns this
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional weave.common.StringRef description = 2;
 * @return {?proto.weave.common.StringRef}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.getDescription = function() {
  return /** @type{?proto.weave.common.StringRef} */ (
    jspb.Message.getWrapperField(this, weave_common_pb.StringRef, 2));
};


/**
 * @param {?proto.weave.common.StringRef|undefined} value
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} returns this
*/
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.setDescription = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} returns this
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float nominalVoltage = 3;
 * @return {number}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.getNominalvoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} returns this
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.setNominalvoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional google.protobuf.FloatValue maximumCurrent = 4;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.getMaximumcurrent = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 4));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} returns this
*/
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.setMaximumcurrent = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} returns this
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.clearMaximumcurrent = function() {
  return this.setMaximumcurrent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.hasMaximumcurrent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PowerSourceCurrentType currentType = 5;
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceCurrentType}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.getCurrenttype = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceCurrentType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceCurrentType} value
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} returns this
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.setCurrenttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint32 order = 6;
 * @return {number}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} returns this
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool removable = 7;
 * @return {boolean}
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.getRemovable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait} returns this
 */
proto.weave.trait.power.PowerSourceCapabilitiesTrait.prototype.setRemovable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.trait.power.PowerSourceTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.trait.power.PowerSourceTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.PowerSourceTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assessedvoltage: (f = msg.getAssessedvoltage()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    assessedcurrent: (f = msg.getAssessedcurrent()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    assessedfrequency: (f = msg.getAssessedfrequency()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    condition: jspb.Message.getFieldWithDefault(msg, 5, 0),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0),
    present: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.trait.power.PowerSourceTrait}
 */
proto.weave.trait.power.PowerSourceTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.trait.power.PowerSourceTrait;
  return proto.weave.trait.power.PowerSourceTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.trait.power.PowerSourceTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.trait.power.PowerSourceTrait}
 */
proto.weave.trait.power.PowerSourceTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setAssessedvoltage(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setAssessedcurrent(value);
      break;
    case 4:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setAssessedfrequency(value);
      break;
    case 5:
      var value = /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} */ (reader.readEnum());
      msg.setCondition(value);
      break;
    case 6:
      var value = /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPresent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.trait.power.PowerSourceTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.trait.power.PowerSourceTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.PowerSourceTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAssessedvoltage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getAssessedcurrent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getAssessedfrequency();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getPresent();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition = {
  POWER_SOURCE_CONDITION_UNSPECIFIED: 0,
  POWER_SOURCE_CONDITION_NOMINAL: 1,
  POWER_SOURCE_CONDITION_CRITICAL: 2
};

/**
 * @enum {number}
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus = {
  POWER_SOURCE_STATUS_UNSPECIFIED: 0,
  POWER_SOURCE_STATUS_ACTIVE: 1,
  POWER_SOURCE_STATUS_STANDBY: 2,
  POWER_SOURCE_STATUS_INACTIVE: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    condition: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent}
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent;
  return proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent}
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} */ (reader.readEnum());
      msg.setCondition(value);
      break;
    case 2:
      var value = /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional PowerSourceCondition condition = 1;
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition}
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.prototype.getCondition = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} value
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent} returns this
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.prototype.setCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PowerSourceStatus status = 2;
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus}
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.prototype.getStatus = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} value
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent} returns this
 */
proto.weave.trait.power.PowerSourceTrait.PowerSourceChangedEvent.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional PowerSourceCapabilitiesTrait.PowerSourceType type = 1;
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.getType = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType} value
 * @return {!proto.weave.trait.power.PowerSourceTrait} returns this
 */
proto.weave.trait.power.PowerSourceTrait.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.FloatValue assessedVoltage = 2;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.getAssessedvoltage = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 2));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.weave.trait.power.PowerSourceTrait} returns this
*/
proto.weave.trait.power.PowerSourceTrait.prototype.setAssessedvoltage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.PowerSourceTrait} returns this
 */
proto.weave.trait.power.PowerSourceTrait.prototype.clearAssessedvoltage = function() {
  return this.setAssessedvoltage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.hasAssessedvoltage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FloatValue assessedCurrent = 3;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.getAssessedcurrent = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 3));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.weave.trait.power.PowerSourceTrait} returns this
*/
proto.weave.trait.power.PowerSourceTrait.prototype.setAssessedcurrent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.PowerSourceTrait} returns this
 */
proto.weave.trait.power.PowerSourceTrait.prototype.clearAssessedcurrent = function() {
  return this.setAssessedcurrent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.hasAssessedcurrent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.FloatValue assessedFrequency = 4;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.getAssessedfrequency = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 4));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.weave.trait.power.PowerSourceTrait} returns this
*/
proto.weave.trait.power.PowerSourceTrait.prototype.setAssessedfrequency = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.PowerSourceTrait} returns this
 */
proto.weave.trait.power.PowerSourceTrait.prototype.clearAssessedfrequency = function() {
  return this.setAssessedfrequency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.hasAssessedfrequency = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PowerSourceCondition condition = 5;
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.getCondition = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} value
 * @return {!proto.weave.trait.power.PowerSourceTrait} returns this
 */
proto.weave.trait.power.PowerSourceTrait.prototype.setCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional PowerSourceStatus status = 6;
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.getStatus = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} value
 * @return {!proto.weave.trait.power.PowerSourceTrait} returns this
 */
proto.weave.trait.power.PowerSourceTrait.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool present = 7;
 * @return {boolean}
 */
proto.weave.trait.power.PowerSourceTrait.prototype.getPresent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weave.trait.power.PowerSourceTrait} returns this
 */
proto.weave.trait.power.PowerSourceTrait.prototype.setPresent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.trait.power.BatteryPowerSourceTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.BatteryPowerSourceTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assessedvoltage: (f = msg.getAssessedvoltage()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    assessedcurrent: (f = msg.getAssessedcurrent()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    assessedfrequency: (f = msg.getAssessedfrequency()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    condition: jspb.Message.getFieldWithDefault(msg, 5, 0),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0),
    present: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    replacementindicator: jspb.Message.getFieldWithDefault(msg, 32, 0),
    remaining: (f = msg.getRemaining()) && proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.trait.power.BatteryPowerSourceTrait;
  return proto.weave.trait.power.BatteryPowerSourceTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setAssessedvoltage(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setAssessedcurrent(value);
      break;
    case 4:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setAssessedfrequency(value);
      break;
    case 5:
      var value = /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} */ (reader.readEnum());
      msg.setCondition(value);
      break;
    case 6:
      var value = /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPresent(value);
      break;
    case 32:
      var value = /** @type {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryReplacementIndicator} */ (reader.readEnum());
      msg.setReplacementindicator(value);
      break;
    case 33:
      var value = new proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining;
      reader.readMessage(value,proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.deserializeBinaryFromReader);
      msg.setRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.trait.power.BatteryPowerSourceTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.BatteryPowerSourceTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAssessedvoltage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getAssessedcurrent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getAssessedfrequency();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getPresent();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getReplacementindicator();
  if (f !== 0.0) {
    writer.writeEnum(
      32,
      f
    );
  }
  f = message.getRemaining();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryReplacementIndicator = {
  BATTERY_REPLACEMENT_INDICATOR_UNSPECIFIED: 0,
  BATTERY_REPLACEMENT_INDICATOR_NOT_AT_ALL: 1,
  BATTERY_REPLACEMENT_INDICATOR_SOON: 2,
  BATTERY_REPLACEMENT_INDICATOR_IMMEDIATELY: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.toObject = function(includeInstance, msg) {
  var f, obj = {
    remainingpercent: (f = msg.getRemainingpercent()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    remainingtime: (f = msg.getRemainingtime()) && weave_common_pb.Timer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining;
  return proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setRemainingpercent(value);
      break;
    case 2:
      var value = new weave_common_pb.Timer;
      reader.readMessage(value,weave_common_pb.Timer.deserializeBinaryFromReader);
      msg.setRemainingtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemainingpercent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getRemainingtime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      weave_common_pb.Timer.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.FloatValue remainingPercent = 1;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.prototype.getRemainingpercent = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 1));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining} returns this
*/
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.prototype.setRemainingpercent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.prototype.clearRemainingpercent = function() {
  return this.setRemainingpercent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.prototype.hasRemainingpercent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional weave.common.Timer remainingTime = 2;
 * @return {?proto.weave.common.Timer}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.prototype.getRemainingtime = function() {
  return /** @type{?proto.weave.common.Timer} */ (
    jspb.Message.getWrapperField(this, weave_common_pb.Timer, 2));
};


/**
 * @param {?proto.weave.common.Timer|undefined} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining} returns this
*/
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.prototype.setRemainingtime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.prototype.clearRemainingtime = function() {
  return this.setRemainingtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.prototype.hasRemainingtime = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    condition: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    replacementindicator: jspb.Message.getFieldWithDefault(msg, 16, 0),
    remaining: (f = msg.getRemaining()) && proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent;
  return proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} */ (reader.readEnum());
      msg.setCondition(value);
      break;
    case 2:
      var value = /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 16:
      var value = /** @type {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryReplacementIndicator} */ (reader.readEnum());
      msg.setReplacementindicator(value);
      break;
    case 17:
      var value = new proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining;
      reader.readMessage(value,proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.deserializeBinaryFromReader);
      msg.setRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondition();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReplacementindicator();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = message.getRemaining();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining.serializeBinaryToWriter
    );
  }
};


/**
 * optional PowerSourceTrait.PowerSourceCondition condition = 1;
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.getCondition = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.setCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PowerSourceTrait.PowerSourceStatus status = 2;
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.getStatus = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional BatteryReplacementIndicator replacementIndicator = 16;
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryReplacementIndicator}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.getReplacementindicator = function() {
  return /** @type {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryReplacementIndicator} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryReplacementIndicator} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.setReplacementindicator = function(value) {
  return jspb.Message.setProto3EnumField(this, 16, value);
};


/**
 * optional BatteryRemaining remaining = 17;
 * @return {?proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.getRemaining = function() {
  return /** @type{?proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining} */ (
    jspb.Message.getWrapperField(this, proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining, 17));
};


/**
 * @param {?proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining|undefined} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent} returns this
*/
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.setRemaining = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.clearRemaining = function() {
  return this.setRemaining(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.BatteryChangedEvent.prototype.hasRemaining = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional PowerSourceCapabilitiesTrait.PowerSourceType type = 1;
 * @return {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.getType = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.FloatValue assessedVoltage = 2;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.getAssessedvoltage = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 2));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
*/
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.setAssessedvoltage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.clearAssessedvoltage = function() {
  return this.setAssessedvoltage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.hasAssessedvoltage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FloatValue assessedCurrent = 3;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.getAssessedcurrent = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 3));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
*/
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.setAssessedcurrent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.clearAssessedcurrent = function() {
  return this.setAssessedcurrent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.hasAssessedcurrent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.FloatValue assessedFrequency = 4;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.getAssessedfrequency = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 4));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
*/
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.setAssessedfrequency = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.clearAssessedfrequency = function() {
  return this.setAssessedfrequency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.hasAssessedfrequency = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PowerSourceTrait.PowerSourceCondition condition = 5;
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.getCondition = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceCondition} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.setCondition = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional PowerSourceTrait.PowerSourceStatus status = 6;
 * @return {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.getStatus = function() {
  return /** @type {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.weave.trait.power.PowerSourceTrait.PowerSourceStatus} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool present = 7;
 * @return {boolean}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.getPresent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.setPresent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional BatteryReplacementIndicator replacementIndicator = 32;
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryReplacementIndicator}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.getReplacementindicator = function() {
  return /** @type {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryReplacementIndicator} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/**
 * @param {!proto.weave.trait.power.BatteryPowerSourceTrait.BatteryReplacementIndicator} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.setReplacementindicator = function(value) {
  return jspb.Message.setProto3EnumField(this, 32, value);
};


/**
 * optional BatteryRemaining remaining = 33;
 * @return {?proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.getRemaining = function() {
  return /** @type{?proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining} */ (
    jspb.Message.getWrapperField(this, proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining, 33));
};


/**
 * @param {?proto.weave.trait.power.BatteryPowerSourceTrait.BatteryRemaining|undefined} value
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
*/
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.setRemaining = function(value) {
  return jspb.Message.setWrapperField(this, 33, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.trait.power.BatteryPowerSourceTrait} returns this
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.clearRemaining = function() {
  return this.setRemaining(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.trait.power.BatteryPowerSourceTrait.prototype.hasRemaining = function() {
  return jspb.Message.getField(this, 33) != null;
};


goog.object.extend(exports, proto.weave.trait.power);
