// source: weave/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.weave.common.DayOfWeek', null, global);
goog.exportSymbol('proto.weave.common.EventId', null, global);
goog.exportSymbol('proto.weave.common.EventImportance', null, global);
goog.exportSymbol('proto.weave.common.FullTraitInstanceId', null, global);
goog.exportSymbol('proto.weave.common.InterfaceName', null, global);
goog.exportSymbol('proto.weave.common.MonthOfYear', null, global);
goog.exportSymbol('proto.weave.common.ProfileSpecificStatusCode', null, global);
goog.exportSymbol('proto.weave.common.QuantityType', null, global);
goog.exportSymbol('proto.weave.common.ResourceId', null, global);
goog.exportSymbol('proto.weave.common.ResourceName', null, global);
goog.exportSymbol('proto.weave.common.ResourceType', null, global);
goog.exportSymbol('proto.weave.common.StringRef', null, global);
goog.exportSymbol('proto.weave.common.StringRef.StringRefCase', null, global);
goog.exportSymbol('proto.weave.common.TimeOfDay', null, global);
goog.exportSymbol('proto.weave.common.Timer', null, global);
goog.exportSymbol('proto.weave.common.TraitInstanceId', null, global);
goog.exportSymbol('proto.weave.common.TraitInstanceId.TraitInstanceCase', null, global);
goog.exportSymbol('proto.weave.common.TraitTypeId', null, global);
goog.exportSymbol('proto.weave.common.TraitTypeInstance', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.Timer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.Timer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.Timer.displayName = 'proto.weave.common.Timer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.TimeOfDay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.TimeOfDay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.TimeOfDay.displayName = 'proto.weave.common.TimeOfDay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.ResourceId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.ResourceId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.ResourceId.displayName = 'proto.weave.common.ResourceId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.ResourceName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.ResourceName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.ResourceName.displayName = 'proto.weave.common.ResourceName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.TraitTypeId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.TraitTypeId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.TraitTypeId.displayName = 'proto.weave.common.TraitTypeId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.TraitTypeInstance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.TraitTypeInstance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.TraitTypeInstance.displayName = 'proto.weave.common.TraitTypeInstance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.TraitInstanceId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.TraitInstanceId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.TraitInstanceId.displayName = 'proto.weave.common.TraitInstanceId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.FullTraitInstanceId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.FullTraitInstanceId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.FullTraitInstanceId.displayName = 'proto.weave.common.FullTraitInstanceId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.InterfaceName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.InterfaceName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.InterfaceName.displayName = 'proto.weave.common.InterfaceName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.EventId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.EventId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.EventId.displayName = 'proto.weave.common.EventId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.ProfileSpecificStatusCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.ProfileSpecificStatusCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.ProfileSpecificStatusCode.displayName = 'proto.weave.common.ProfileSpecificStatusCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weave.common.StringRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weave.common.StringRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weave.common.StringRef.displayName = 'proto.weave.common.StringRef';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.Timer.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.Timer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.Timer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.Timer.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    timebasis: (f = msg.getTimebasis()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.Timer}
 */
proto.weave.common.Timer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.Timer;
  return proto.weave.common.Timer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.Timer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.Timer}
 */
proto.weave.common.Timer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimebasis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.Timer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.Timer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.Timer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.Timer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getTimebasis();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Duration time = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.weave.common.Timer.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.weave.common.Timer} returns this
*/
proto.weave.common.Timer.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.common.Timer} returns this
 */
proto.weave.common.Timer.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.common.Timer.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp timeBasis = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.weave.common.Timer.prototype.getTimebasis = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.weave.common.Timer} returns this
*/
proto.weave.common.Timer.prototype.setTimebasis = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.common.Timer} returns this
 */
proto.weave.common.Timer.prototype.clearTimebasis = function() {
  return this.setTimebasis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.common.Timer.prototype.hasTimebasis = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.TimeOfDay.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.TimeOfDay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.TimeOfDay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.TimeOfDay.toObject = function(includeInstance, msg) {
  var f, obj = {
    hour: jspb.Message.getFieldWithDefault(msg, 5, 0),
    minute: jspb.Message.getFieldWithDefault(msg, 6, 0),
    second: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.TimeOfDay}
 */
proto.weave.common.TimeOfDay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.TimeOfDay;
  return proto.weave.common.TimeOfDay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.TimeOfDay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.TimeOfDay}
 */
proto.weave.common.TimeOfDay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHour(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinute(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.TimeOfDay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.TimeOfDay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.TimeOfDay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.TimeOfDay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHour();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMinute();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getSecond();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional uint32 hour = 5;
 * @return {number}
 */
proto.weave.common.TimeOfDay.prototype.getHour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.weave.common.TimeOfDay} returns this
 */
proto.weave.common.TimeOfDay.prototype.setHour = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 minute = 6;
 * @return {number}
 */
proto.weave.common.TimeOfDay.prototype.getMinute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.weave.common.TimeOfDay} returns this
 */
proto.weave.common.TimeOfDay.prototype.setMinute = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 second = 7;
 * @return {number}
 */
proto.weave.common.TimeOfDay.prototype.getSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.weave.common.TimeOfDay} returns this
 */
proto.weave.common.TimeOfDay.prototype.setSecond = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.ResourceId.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.ResourceId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.ResourceId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.ResourceId.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.ResourceId}
 */
proto.weave.common.ResourceId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.ResourceId;
  return proto.weave.common.ResourceId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.ResourceId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.ResourceId}
 */
proto.weave.common.ResourceId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.ResourceId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.ResourceId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.ResourceId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.ResourceId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string resourceId = 1;
 * @return {string}
 */
proto.weave.common.ResourceId.prototype.getResourceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weave.common.ResourceId} returns this
 */
proto.weave.common.ResourceId.prototype.setResourceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.ResourceName.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.ResourceName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.ResourceName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.ResourceName.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourcename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.ResourceName}
 */
proto.weave.common.ResourceName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.ResourceName;
  return proto.weave.common.ResourceName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.ResourceName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.ResourceName}
 */
proto.weave.common.ResourceName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourcename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.ResourceName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.ResourceName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.ResourceName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.ResourceName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourcename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string resourceName = 1;
 * @return {string}
 */
proto.weave.common.ResourceName.prototype.getResourcename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weave.common.ResourceName} returns this
 */
proto.weave.common.ResourceName.prototype.setResourcename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.TraitTypeId.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.TraitTypeId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.TraitTypeId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.TraitTypeId.toObject = function(includeInstance, msg) {
  var f, obj = {
    traittypeid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.TraitTypeId}
 */
proto.weave.common.TraitTypeId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.TraitTypeId;
  return proto.weave.common.TraitTypeId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.TraitTypeId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.TraitTypeId}
 */
proto.weave.common.TraitTypeId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTraittypeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.TraitTypeId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.TraitTypeId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.TraitTypeId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.TraitTypeId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraittypeid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 traitTypeId = 1;
 * @return {number}
 */
proto.weave.common.TraitTypeId.prototype.getTraittypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.weave.common.TraitTypeId} returns this
 */
proto.weave.common.TraitTypeId.prototype.setTraittypeid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.TraitTypeInstance.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.TraitTypeInstance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.TraitTypeInstance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.TraitTypeInstance.toObject = function(includeInstance, msg) {
  var f, obj = {
    traittypeid: (f = msg.getTraittypeid()) && proto.weave.common.TraitTypeId.toObject(includeInstance, f),
    instanceid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.TraitTypeInstance}
 */
proto.weave.common.TraitTypeInstance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.TraitTypeInstance;
  return proto.weave.common.TraitTypeInstance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.TraitTypeInstance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.TraitTypeInstance}
 */
proto.weave.common.TraitTypeInstance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weave.common.TraitTypeId;
      reader.readMessage(value,proto.weave.common.TraitTypeId.deserializeBinaryFromReader);
      msg.setTraittypeid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.TraitTypeInstance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.TraitTypeInstance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.TraitTypeInstance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.TraitTypeInstance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraittypeid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weave.common.TraitTypeId.serializeBinaryToWriter
    );
  }
  f = message.getInstanceid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional TraitTypeId traitTypeId = 1;
 * @return {?proto.weave.common.TraitTypeId}
 */
proto.weave.common.TraitTypeInstance.prototype.getTraittypeid = function() {
  return /** @type{?proto.weave.common.TraitTypeId} */ (
    jspb.Message.getWrapperField(this, proto.weave.common.TraitTypeId, 1));
};


/**
 * @param {?proto.weave.common.TraitTypeId|undefined} value
 * @return {!proto.weave.common.TraitTypeInstance} returns this
*/
proto.weave.common.TraitTypeInstance.prototype.setTraittypeid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.common.TraitTypeInstance} returns this
 */
proto.weave.common.TraitTypeInstance.prototype.clearTraittypeid = function() {
  return this.setTraittypeid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.common.TraitTypeInstance.prototype.hasTraittypeid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 instanceId = 2;
 * @return {number}
 */
proto.weave.common.TraitTypeInstance.prototype.getInstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.weave.common.TraitTypeInstance} returns this
 */
proto.weave.common.TraitTypeInstance.prototype.setInstanceid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.TraitInstanceId.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.TraitInstanceId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.TraitInstanceId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.TraitInstanceId.toObject = function(includeInstance, msg) {
  var f, obj = {
    traitinstancelabel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    traitinstanceid: (f = msg.getTraitinstanceid()) && proto.weave.common.TraitTypeInstance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.TraitInstanceId}
 */
proto.weave.common.TraitInstanceId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.TraitInstanceId;
  return proto.weave.common.TraitInstanceId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.TraitInstanceId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.TraitInstanceId}
 */
proto.weave.common.TraitInstanceId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraitinstancelabel(value);
      break;
    case 2:
      var value = new proto.weave.common.TraitTypeInstance;
      reader.readMessage(value,proto.weave.common.TraitTypeInstance.deserializeBinaryFromReader);
      msg.setTraitinstanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.TraitInstanceId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.TraitInstanceId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.TraitInstanceId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.TraitInstanceId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraitinstancelabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTraitinstanceid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.weave.common.TraitTypeInstance.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.weave.common.TraitInstanceId.TraitInstanceCase = {
  TRAIT_INSTANCE_NOT_SET: 0,
  TRAIT_INSTANCE_LABEL: 1,
  TRAIT_INSTANCE_ID: 2
};

/**
 * optional string traitInstanceLabel = 1;
 * @return {string}
 */
proto.weave.common.TraitInstanceId.prototype.getTraitinstancelabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weave.common.TraitInstanceId} returns this
 */
proto.weave.common.TraitInstanceId.prototype.setTraitinstancelabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TraitTypeInstance traitInstanceId = 2;
 * @return {?proto.weave.common.TraitTypeInstance}
 */
proto.weave.common.TraitInstanceId.prototype.getTraitinstanceid = function() {
  return /** @type{?proto.weave.common.TraitTypeInstance} */ (
    jspb.Message.getWrapperField(this, proto.weave.common.TraitTypeInstance, 2));
};


/**
 * @param {?proto.weave.common.TraitTypeInstance|undefined} value
 * @return {!proto.weave.common.TraitInstanceId} returns this
*/
proto.weave.common.TraitInstanceId.prototype.setTraitinstanceid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.common.TraitInstanceId} returns this
 */
proto.weave.common.TraitInstanceId.prototype.clearTraitinstanceid = function() {
  return this.setTraitinstanceid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.common.TraitInstanceId.prototype.hasTraitinstanceid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.FullTraitInstanceId.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.FullTraitInstanceId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.FullTraitInstanceId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.FullTraitInstanceId.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceid: (f = msg.getResourceid()) && proto.weave.common.ResourceId.toObject(includeInstance, f),
    traitinstanceid: (f = msg.getTraitinstanceid()) && proto.weave.common.TraitInstanceId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.FullTraitInstanceId}
 */
proto.weave.common.FullTraitInstanceId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.FullTraitInstanceId;
  return proto.weave.common.FullTraitInstanceId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.FullTraitInstanceId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.FullTraitInstanceId}
 */
proto.weave.common.FullTraitInstanceId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weave.common.ResourceId;
      reader.readMessage(value,proto.weave.common.ResourceId.deserializeBinaryFromReader);
      msg.setResourceid(value);
      break;
    case 2:
      var value = new proto.weave.common.TraitInstanceId;
      reader.readMessage(value,proto.weave.common.TraitInstanceId.deserializeBinaryFromReader);
      msg.setTraitinstanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.FullTraitInstanceId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.FullTraitInstanceId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.FullTraitInstanceId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.FullTraitInstanceId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weave.common.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getTraitinstanceid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.weave.common.TraitInstanceId.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResourceId resourceId = 1;
 * @return {?proto.weave.common.ResourceId}
 */
proto.weave.common.FullTraitInstanceId.prototype.getResourceid = function() {
  return /** @type{?proto.weave.common.ResourceId} */ (
    jspb.Message.getWrapperField(this, proto.weave.common.ResourceId, 1));
};


/**
 * @param {?proto.weave.common.ResourceId|undefined} value
 * @return {!proto.weave.common.FullTraitInstanceId} returns this
*/
proto.weave.common.FullTraitInstanceId.prototype.setResourceid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.common.FullTraitInstanceId} returns this
 */
proto.weave.common.FullTraitInstanceId.prototype.clearResourceid = function() {
  return this.setResourceid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.common.FullTraitInstanceId.prototype.hasResourceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TraitInstanceId traitInstanceId = 2;
 * @return {?proto.weave.common.TraitInstanceId}
 */
proto.weave.common.FullTraitInstanceId.prototype.getTraitinstanceid = function() {
  return /** @type{?proto.weave.common.TraitInstanceId} */ (
    jspb.Message.getWrapperField(this, proto.weave.common.TraitInstanceId, 2));
};


/**
 * @param {?proto.weave.common.TraitInstanceId|undefined} value
 * @return {!proto.weave.common.FullTraitInstanceId} returns this
*/
proto.weave.common.FullTraitInstanceId.prototype.setTraitinstanceid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.common.FullTraitInstanceId} returns this
 */
proto.weave.common.FullTraitInstanceId.prototype.clearTraitinstanceid = function() {
  return this.setTraitinstanceid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.common.FullTraitInstanceId.prototype.hasTraitinstanceid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.InterfaceName.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.InterfaceName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.InterfaceName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.InterfaceName.toObject = function(includeInstance, msg) {
  var f, obj = {
    interfacename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.InterfaceName}
 */
proto.weave.common.InterfaceName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.InterfaceName;
  return proto.weave.common.InterfaceName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.InterfaceName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.InterfaceName}
 */
proto.weave.common.InterfaceName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInterfacename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.InterfaceName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.InterfaceName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.InterfaceName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.InterfaceName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterfacename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string interfaceName = 1;
 * @return {string}
 */
proto.weave.common.InterfaceName.prototype.getInterfacename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weave.common.InterfaceName} returns this
 */
proto.weave.common.InterfaceName.prototype.setInterfacename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.EventId.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.EventId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.EventId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.EventId.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceid: (f = msg.getResourceid()) && proto.weave.common.ResourceId.toObject(includeInstance, f),
    importance: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.EventId}
 */
proto.weave.common.EventId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.EventId;
  return proto.weave.common.EventId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.EventId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.EventId}
 */
proto.weave.common.EventId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weave.common.ResourceId;
      reader.readMessage(value,proto.weave.common.ResourceId.deserializeBinaryFromReader);
      msg.setResourceid(value);
      break;
    case 2:
      var value = /** @type {!proto.weave.common.EventImportance} */ (reader.readEnum());
      msg.setImportance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.EventId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.EventId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.EventId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.EventId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weave.common.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getImportance();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional ResourceId resourceId = 1;
 * @return {?proto.weave.common.ResourceId}
 */
proto.weave.common.EventId.prototype.getResourceid = function() {
  return /** @type{?proto.weave.common.ResourceId} */ (
    jspb.Message.getWrapperField(this, proto.weave.common.ResourceId, 1));
};


/**
 * @param {?proto.weave.common.ResourceId|undefined} value
 * @return {!proto.weave.common.EventId} returns this
*/
proto.weave.common.EventId.prototype.setResourceid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weave.common.EventId} returns this
 */
proto.weave.common.EventId.prototype.clearResourceid = function() {
  return this.setResourceid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weave.common.EventId.prototype.hasResourceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventImportance importance = 2;
 * @return {!proto.weave.common.EventImportance}
 */
proto.weave.common.EventId.prototype.getImportance = function() {
  return /** @type {!proto.weave.common.EventImportance} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.weave.common.EventImportance} value
 * @return {!proto.weave.common.EventId} returns this
 */
proto.weave.common.EventId.prototype.setImportance = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint64 id = 3;
 * @return {number}
 */
proto.weave.common.EventId.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.weave.common.EventId} returns this
 */
proto.weave.common.EventId.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.ProfileSpecificStatusCode.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.ProfileSpecificStatusCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.ProfileSpecificStatusCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.ProfileSpecificStatusCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    profileid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statuscode: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.ProfileSpecificStatusCode}
 */
proto.weave.common.ProfileSpecificStatusCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.ProfileSpecificStatusCode;
  return proto.weave.common.ProfileSpecificStatusCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.ProfileSpecificStatusCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.ProfileSpecificStatusCode}
 */
proto.weave.common.ProfileSpecificStatusCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProfileid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatuscode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.ProfileSpecificStatusCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.ProfileSpecificStatusCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.ProfileSpecificStatusCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.ProfileSpecificStatusCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfileid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 profileId = 1;
 * @return {number}
 */
proto.weave.common.ProfileSpecificStatusCode.prototype.getProfileid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.weave.common.ProfileSpecificStatusCode} returns this
 */
proto.weave.common.ProfileSpecificStatusCode.prototype.setProfileid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 statusCode = 2;
 * @return {number}
 */
proto.weave.common.ProfileSpecificStatusCode.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.weave.common.ProfileSpecificStatusCode} returns this
 */
proto.weave.common.ProfileSpecificStatusCode.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weave.common.StringRef.prototype.toObject = function(opt_includeInstance) {
  return proto.weave.common.StringRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weave.common.StringRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.StringRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    literal: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reference: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weave.common.StringRef}
 */
proto.weave.common.StringRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weave.common.StringRef;
  return proto.weave.common.StringRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weave.common.StringRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weave.common.StringRef}
 */
proto.weave.common.StringRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiteral(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weave.common.StringRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weave.common.StringRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weave.common.StringRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weave.common.StringRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLiteral();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReference();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.weave.common.StringRef.StringRefCase = {
  STRING_REF_NOT_SET: 0,
  LITERAL: 1,
  REFERENCE: 2
};

/**
 * optional string literal = 1;
 * @return {string}
 */
proto.weave.common.StringRef.prototype.getLiteral = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weave.common.StringRef} returns this
 */
proto.weave.common.StringRef.prototype.setLiteral = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 reference = 2;
 * @return {number}
 */
proto.weave.common.StringRef.prototype.getReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.weave.common.StringRef} returns this
 */
proto.weave.common.StringRef.prototype.setReference = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.weave.common.DayOfWeek = {
  DAY_OF_WEEK_UNSPECIFIED: 0,
  DAY_OF_WEEK_SUNDAY: 1,
  DAY_OF_WEEK_MONDAY: 2,
  DAY_OF_WEEK_TUESDAY: 4,
  DAY_OF_WEEK_WEDNESDAY: 8,
  DAY_OF_WEEK_THURSDAY: 16,
  DAY_OF_WEEK_FRIDAY: 32,
  DAY_OF_WEEK_SATURDAY: 64
};

/**
 * @enum {number}
 */
proto.weave.common.MonthOfYear = {
  MONTH_OF_YEAR_UNSPECIFIED: 0,
  MONTH_OF_YEAR_JANUARY: 1,
  MONTH_OF_YEAR_FEBRUARY: 2,
  MONTH_OF_YEAR_MARCH: 4,
  MONTH_OF_YEAR_APRIL: 8,
  MONTH_OF_YEAR_MAY: 16,
  MONTH_OF_YEAR_JUNE: 32,
  MONTH_OF_YEAR_JULY: 64,
  MONTH_OF_YEAR_AUGUST: 128,
  MONTH_OF_YEAR_SEPTEMBER: 256,
  MONTH_OF_YEAR_OCTOBER: 512,
  MONTH_OF_YEAR_NOVEMBER: 1024,
  MONTH_OF_YEAR_DECEMBER: 2048
};

/**
 * @enum {number}
 */
proto.weave.common.ResourceType = {
  RESOURCE_TYPE_UNSPECIFIED: 0,
  RESOURCE_TYPE_DEVICE: 1,
  RESOURCE_TYPE_USER: 2,
  RESOURCE_TYPE_ACCOUNT: 3,
  RESOURCE_TYPE_AREA: 4,
  RESOURCE_TYPE_FIXTURE: 5,
  RESOURCE_TYPE_GROUP: 6,
  RESOURCE_TYPE_ANNOTATION: 7,
  RESOURCE_TYPE_STRUCTURE: 8,
  RESOURCE_TYPE_GUEST: 9,
  RESOURCE_TYPE_SERVICE: 10
};

/**
 * @enum {number}
 */
proto.weave.common.QuantityType = {
  QUANTITY_TYPE_UNSPECIFIED: 0,
  LENGTH: 1,
  MASS: 2,
  DURATION: 3,
  CURRENT: 4,
  TEMPERATURE: 5,
  LUMINOUS_INTENSITY: 6,
  AREA: 7,
  VOLUME: 8,
  VELOCITY: 9,
  ACCELERATION: 10,
  FREQUENCY: 27,
  ENERGY: 30,
  ELECTRIC_CHARGE: 32,
  VOLTAGE: 33,
  RESISTANCE: 34,
  MAGNETIC_FLUX_DENSITY: 38,
  ILLUMINANCE: 42,
  HUMIDITY: 46,
  DBM: 47,
  PPM: 48,
  PIRMEASUREMENT: 256,
  NORMALIZED: 257
};

/**
 * @enum {number}
 */
proto.weave.common.EventImportance = {
  EVENT_IMPORTANCE_UNSPECIFIED: 0,
  EVENT_IMPORTANCE_PRODUCTION_CRITICAL: 1,
  EVENT_IMPORTANCE_PRODUCTION_STANDARD: 2,
  EVENT_IMPORTANCE_INFO: 3,
  EVENT_IMPORTANCE_DEBUG: 4
};

goog.object.extend(exports, proto.weave.common);
