// source: nest/trait/located.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.nest.trait.located.DeviceLocatedSettingsTrait', null, global);
goog.exportSymbol('proto.nest.trait.located.Float_Indirect', null, global);
goog.exportSymbol('proto.nest.trait.located.Int32_Indirect', null, global);
goog.exportSymbol('proto.nest.trait.located.LocatedAnnotationsTrait', null, global);
goog.exportSymbol('proto.nest.trait.located.LocatedAnnotationsTrait.Annotation', null, global);
goog.exportSymbol('proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo', null, global);
goog.exportSymbol('proto.nest.trait.located.LocatedTrait', null, global);
goog.exportSymbol('proto.nest.trait.located.LocatedTrait.LocatedFixtureType', null, global);
goog.exportSymbol('proto.nest.trait.located.LocatedTrait.LocatedMajorFixtureType', null, global);
goog.exportSymbol('proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeDoor', null, global);
goog.exportSymbol('proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeObject', null, global);
goog.exportSymbol('proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWall', null, global);
goog.exportSymbol('proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWindow', null, global);
goog.exportSymbol('proto.nest.trait.located.String_Indirect', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.located.DeviceLocatedSettingsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.located.DeviceLocatedSettingsTrait.displayName = 'proto.nest.trait.located.DeviceLocatedSettingsTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.located.LocatedAnnotationsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nest.trait.located.LocatedAnnotationsTrait.repeatedFields_, null);
};
goog.inherits(proto.nest.trait.located.LocatedAnnotationsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.located.LocatedAnnotationsTrait.displayName = 'proto.nest.trait.located.LocatedAnnotationsTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.located.LocatedAnnotationsTrait.Annotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.displayName = 'proto.nest.trait.located.LocatedAnnotationsTrait.Annotation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.displayName = 'proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.located.LocatedTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.located.LocatedTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.located.LocatedTrait.displayName = 'proto.nest.trait.located.LocatedTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.located.LocatedTrait.LocatedFixtureType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.located.LocatedTrait.LocatedFixtureType.displayName = 'proto.nest.trait.located.LocatedTrait.LocatedFixtureType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.located.String_Indirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.located.String_Indirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.located.String_Indirect.displayName = 'proto.nest.trait.located.String_Indirect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.located.Float_Indirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.located.Float_Indirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.located.Float_Indirect.displayName = 'proto.nest.trait.located.Float_Indirect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.located.Int32_Indirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.located.Int32_Indirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.located.Int32_Indirect.displayName = 'proto.nest.trait.located.Int32_Indirect';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.located.DeviceLocatedSettingsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.located.DeviceLocatedSettingsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    whereId: (f = msg.getWhereId()) && proto.nest.trait.located.String_Indirect.toObject(includeInstance, f),
    fixturetype: (f = msg.getFixturetype()) && proto.nest.trait.located.LocatedTrait.LocatedFixtureType.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && proto.nest.trait.located.Int32_Indirect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.located.DeviceLocatedSettingsTrait}
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.located.DeviceLocatedSettingsTrait;
  return proto.nest.trait.located.DeviceLocatedSettingsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.located.DeviceLocatedSettingsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.located.DeviceLocatedSettingsTrait}
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.nest.trait.located.String_Indirect;
      reader.readMessage(value,proto.nest.trait.located.String_Indirect.deserializeBinaryFromReader);
      msg.setWhereId(value);
      break;
    case 4:
      var value = new proto.nest.trait.located.LocatedTrait.LocatedFixtureType;
      reader.readMessage(value,proto.nest.trait.located.LocatedTrait.LocatedFixtureType.deserializeBinaryFromReader);
      msg.setFixturetype(value);
      break;
    case 9:
      var value = new proto.nest.trait.located.Int32_Indirect;
      reader.readMessage(value,proto.nest.trait.located.Int32_Indirect.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.located.DeviceLocatedSettingsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.located.DeviceLocatedSettingsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWhereId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nest.trait.located.String_Indirect.serializeBinaryToWriter
    );
  }
  f = message.getFixturetype();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nest.trait.located.LocatedTrait.LocatedFixtureType.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.nest.trait.located.Int32_Indirect.serializeBinaryToWriter
    );
  }
};


/**
 * optional String_Indirect where_id = 2;
 * @return {?proto.nest.trait.located.String_Indirect}
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.getWhereId = function() {
  return /** @type{?proto.nest.trait.located.String_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.located.String_Indirect, 2));
};


/**
 * @param {?proto.nest.trait.located.String_Indirect|undefined} value
 * @return {!proto.nest.trait.located.DeviceLocatedSettingsTrait} returns this
*/
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.setWhereId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.located.DeviceLocatedSettingsTrait} returns this
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.clearWhereId = function() {
  return this.setWhereId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.hasWhereId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LocatedTrait.LocatedFixtureType fixtureType = 4;
 * @return {?proto.nest.trait.located.LocatedTrait.LocatedFixtureType}
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.getFixturetype = function() {
  return /** @type{?proto.nest.trait.located.LocatedTrait.LocatedFixtureType} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.located.LocatedTrait.LocatedFixtureType, 4));
};


/**
 * @param {?proto.nest.trait.located.LocatedTrait.LocatedFixtureType|undefined} value
 * @return {!proto.nest.trait.located.DeviceLocatedSettingsTrait} returns this
*/
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.setFixturetype = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.located.DeviceLocatedSettingsTrait} returns this
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.clearFixturetype = function() {
  return this.setFixturetype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.hasFixturetype = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Int32_Indirect timestamp = 9;
 * @return {?proto.nest.trait.located.Int32_Indirect}
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.getTimestamp = function() {
  return /** @type{?proto.nest.trait.located.Int32_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.located.Int32_Indirect, 9));
};


/**
 * @param {?proto.nest.trait.located.Int32_Indirect|undefined} value
 * @return {!proto.nest.trait.located.DeviceLocatedSettingsTrait} returns this
*/
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.located.DeviceLocatedSettingsTrait} returns this
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.located.DeviceLocatedSettingsTrait.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nest.trait.located.LocatedAnnotationsTrait.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.located.LocatedAnnotationsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.LocatedAnnotationsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    annotationsList: jspb.Message.toObjectList(msg.getAnnotationsList(),
    proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.toObject, includeInstance),
    customAnnotationsList: jspb.Message.toObjectList(msg.getCustomAnnotationsList(),
    proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.located.LocatedAnnotationsTrait;
  return proto.nest.trait.located.LocatedAnnotationsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.trait.located.LocatedAnnotationsTrait.Annotation;
      reader.readMessage(value,proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.deserializeBinaryFromReader);
      msg.addAnnotations(value);
      break;
    case 2:
      var value = new proto.nest.trait.located.LocatedAnnotationsTrait.Annotation;
      reader.readMessage(value,proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.deserializeBinaryFromReader);
      msg.addCustomAnnotations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.located.LocatedAnnotationsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.LocatedAnnotationsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.serializeBinaryToWriter
    );
  }
  f = message.getCustomAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.located.LocatedAnnotationsTrait.Annotation;
  return proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo;
      reader.readMessage(value,proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.nest.trait.located.String_Indirect.toObject(includeInstance, f),
    name: (f = msg.getName()) && proto.nest.trait.located.String_Indirect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo;
  return proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.trait.located.String_Indirect;
      reader.readMessage(value,proto.nest.trait.located.String_Indirect.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nest.trait.located.String_Indirect;
      reader.readMessage(value,proto.nest.trait.located.String_Indirect.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nest.trait.located.String_Indirect.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nest.trait.located.String_Indirect.serializeBinaryToWriter
    );
  }
};


/**
 * optional String_Indirect id = 1;
 * @return {?proto.nest.trait.located.String_Indirect}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.prototype.getId = function() {
  return /** @type{?proto.nest.trait.located.String_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.located.String_Indirect, 1));
};


/**
 * @param {?proto.nest.trait.located.String_Indirect|undefined} value
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo} returns this
*/
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo} returns this
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional String_Indirect name = 2;
 * @return {?proto.nest.trait.located.String_Indirect}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.prototype.getName = function() {
  return /** @type{?proto.nest.trait.located.String_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.located.String_Indirect, 2));
};


/**
 * @param {?proto.nest.trait.located.String_Indirect|undefined} value
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo} returns this
*/
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.prototype.setName = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo} returns this
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.prototype.clearName = function() {
  return this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AnnotationInfo info = 2;
 * @return {?proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.prototype.getInfo = function() {
  return /** @type{?proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo, 2));
};


/**
 * @param {?proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.AnnotationInfo|undefined} value
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation} returns this
*/
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation} returns this
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.Annotation.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Annotation annotations = 1;
 * @return {!Array<!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation>}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.prototype.getAnnotationsList = function() {
  return /** @type{!Array<!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nest.trait.located.LocatedAnnotationsTrait.Annotation, 1));
};


/**
 * @param {!Array<!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation>} value
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait} returns this
*/
proto.nest.trait.located.LocatedAnnotationsTrait.prototype.setAnnotationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.prototype.addAnnotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nest.trait.located.LocatedAnnotationsTrait.Annotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait} returns this
 */
proto.nest.trait.located.LocatedAnnotationsTrait.prototype.clearAnnotationsList = function() {
  return this.setAnnotationsList([]);
};


/**
 * repeated Annotation custom_annotations = 2;
 * @return {!Array<!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation>}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.prototype.getCustomAnnotationsList = function() {
  return /** @type{!Array<!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nest.trait.located.LocatedAnnotationsTrait.Annotation, 2));
};


/**
 * @param {!Array<!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation>} value
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait} returns this
*/
proto.nest.trait.located.LocatedAnnotationsTrait.prototype.setCustomAnnotationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait.Annotation}
 */
proto.nest.trait.located.LocatedAnnotationsTrait.prototype.addCustomAnnotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nest.trait.located.LocatedAnnotationsTrait.Annotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nest.trait.located.LocatedAnnotationsTrait} returns this
 */
proto.nest.trait.located.LocatedAnnotationsTrait.prototype.clearCustomAnnotationsList = function() {
  return this.setCustomAnnotationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.located.LocatedTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.located.LocatedTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.located.LocatedTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.LocatedTrait.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.located.LocatedTrait}
 */
proto.nest.trait.located.LocatedTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.located.LocatedTrait;
  return proto.nest.trait.located.LocatedTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.located.LocatedTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.located.LocatedTrait}
 */
proto.nest.trait.located.LocatedTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.located.LocatedTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.located.LocatedTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.located.LocatedTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.LocatedTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.nest.trait.located.LocatedTrait.LocatedMajorFixtureType = {
  LOCATED_MAJOR_FIXTURE_TYPE_UNSPECIFIED: 0,
  LOCATED_MAJOR_FIXTURE_TYPE_DOOR: 1,
  LOCATED_MAJOR_FIXTURE_TYPE_WINDOW: 2,
  LOCATED_MAJOR_FIXTURE_TYPE_WALL: 3,
  LOCATED_MAJOR_FIXTURE_TYPE_OBJECT: 4
};

/**
 * @enum {number}
 */
proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeDoor = {
  LOCATED_MINOR_FIXTURE_TYPE_DOOR_UNSPECIFIED: 0,
  LOCATED_MINOR_FIXTURE_TYPE_DOOR_GENERIC: 1,
  LOCATED_MINOR_FIXTURE_TYPE_DOOR_HINGED: 2,
  LOCATED_MINOR_FIXTURE_TYPE_DOOR_FRENCH: 3,
  LOCATED_MINOR_FIXTURE_TYPE_DOOR_SLIDING: 4,
  LOCATED_MINOR_FIXTURE_TYPE_DOOR_GARAGE_SEGMENTED: 5,
  LOCATED_MINOR_FIXTURE_TYPE_DOOR_GARAGE_SINGLE_PANEL: 6
};

/**
 * @enum {number}
 */
proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWindow = {
  LOCATED_MINOR_FIXTURE_TYPE_WINDOW_UNSPECIFIED: 0,
  LOCATED_MINOR_FIXTURE_TYPE_WINDOW_GENERIC: 1,
  LOCATED_MINOR_FIXTURE_TYPE_WINDOW_VERTICAL_SINGLE_HUNG: 2,
  LOCATED_MINOR_FIXTURE_TYPE_WINDOW_HORIZONTAL_SINGLE_HUNG: 3,
  LOCATED_MINOR_FIXTURE_TYPE_WINDOW_VERTICAL_DOUBLE_HUNG: 4,
  LOCATED_MINOR_FIXTURE_TYPE_WINDOW_HORIZONTAL_DOUBLE_HUNG: 5,
  LOCATED_MINOR_FIXTURE_TYPE_WINDOW_VERTICAL_CASEMENT: 6,
  LOCATED_MINOR_FIXTURE_TYPE_WINDOW_HORIZONTAL_CASEMENT: 7,
  LOCATED_MINOR_FIXTURE_TYPE_WINDOW_TILTTURN: 8,
  LOCATED_MINOR_FIXTURE_TYPE_WINDOW_ROOF: 9
};

/**
 * @enum {number}
 */
proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWall = {
  LOCATED_MINOR_FIXTURE_TYPE_WALL_UNSPECIFIED: 0,
  LOCATED_MINOR_FIXTURE_TYPE_WALL_GENERIC: 1,
  LOCATED_MINOR_FIXTURE_TYPE_WALL_CORNER: 2,
  LOCATED_MINOR_FIXTURE_TYPE_WALL_FLUSH: 3
};

/**
 * @enum {number}
 */
proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeObject = {
  LOCATED_MINOR_FIXTURE_TYPE_OBJECT_UNSPECIFIED: 0,
  LOCATED_MINOR_FIXTURE_TYPE_OBJECT_GENERIC: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.located.LocatedTrait.LocatedFixtureType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.located.LocatedTrait.LocatedFixtureType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.toObject = function(includeInstance, msg) {
  var f, obj = {
    majortype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minortypedoor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minortypewindow: jspb.Message.getFieldWithDefault(msg, 3, 0),
    minortypewall: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minortypeobject: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedFixtureType}
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.located.LocatedTrait.LocatedFixtureType;
  return proto.nest.trait.located.LocatedTrait.LocatedFixtureType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.located.LocatedTrait.LocatedFixtureType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedFixtureType}
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.located.LocatedTrait.LocatedMajorFixtureType} */ (reader.readEnum());
      msg.setMajortype(value);
      break;
    case 2:
      var value = /** @type {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeDoor} */ (reader.readEnum());
      msg.setMinortypedoor(value);
      break;
    case 3:
      var value = /** @type {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWindow} */ (reader.readEnum());
      msg.setMinortypewindow(value);
      break;
    case 4:
      var value = /** @type {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWall} */ (reader.readEnum());
      msg.setMinortypewall(value);
      break;
    case 5:
      var value = /** @type {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeObject} */ (reader.readEnum());
      msg.setMinortypeobject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.located.LocatedTrait.LocatedFixtureType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.located.LocatedTrait.LocatedFixtureType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajortype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMinortypedoor();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMinortypewindow();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMinortypewall();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getMinortypeobject();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional LocatedMajorFixtureType majorType = 1;
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedMajorFixtureType}
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.getMajortype = function() {
  return /** @type {!proto.nest.trait.located.LocatedTrait.LocatedMajorFixtureType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nest.trait.located.LocatedTrait.LocatedMajorFixtureType} value
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedFixtureType} returns this
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.setMajortype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional LocatedMinorFixtureTypeDoor minorTypeDoor = 2;
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeDoor}
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.getMinortypedoor = function() {
  return /** @type {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeDoor} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeDoor} value
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedFixtureType} returns this
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.setMinortypedoor = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional LocatedMinorFixtureTypeWindow minorTypeWindow = 3;
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWindow}
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.getMinortypewindow = function() {
  return /** @type {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWindow} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWindow} value
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedFixtureType} returns this
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.setMinortypewindow = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional LocatedMinorFixtureTypeWall minorTypeWall = 4;
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWall}
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.getMinortypewall = function() {
  return /** @type {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWall} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeWall} value
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedFixtureType} returns this
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.setMinortypewall = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional LocatedMinorFixtureTypeObject minorTypeObject = 5;
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeObject}
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.getMinortypeobject = function() {
  return /** @type {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeObject} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.nest.trait.located.LocatedTrait.LocatedMinorFixtureTypeObject} value
 * @return {!proto.nest.trait.located.LocatedTrait.LocatedFixtureType} returns this
 */
proto.nest.trait.located.LocatedTrait.LocatedFixtureType.prototype.setMinortypeobject = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.located.String_Indirect.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.located.String_Indirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.located.String_Indirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.String_Indirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.located.String_Indirect}
 */
proto.nest.trait.located.String_Indirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.located.String_Indirect;
  return proto.nest.trait.located.String_Indirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.located.String_Indirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.located.String_Indirect}
 */
proto.nest.trait.located.String_Indirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.located.String_Indirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.located.String_Indirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.located.String_Indirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.String_Indirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.nest.trait.located.String_Indirect.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.trait.located.String_Indirect} returns this
 */
proto.nest.trait.located.String_Indirect.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.located.Float_Indirect.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.located.Float_Indirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.located.Float_Indirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.Float_Indirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.located.Float_Indirect}
 */
proto.nest.trait.located.Float_Indirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.located.Float_Indirect;
  return proto.nest.trait.located.Float_Indirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.located.Float_Indirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.located.Float_Indirect}
 */
proto.nest.trait.located.Float_Indirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.located.Float_Indirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.located.Float_Indirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.located.Float_Indirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.Float_Indirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.nest.trait.located.Float_Indirect.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.located.Float_Indirect} returns this
 */
proto.nest.trait.located.Float_Indirect.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.located.Int32_Indirect.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.located.Int32_Indirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.located.Int32_Indirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.Int32_Indirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.located.Int32_Indirect}
 */
proto.nest.trait.located.Int32_Indirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.located.Int32_Indirect;
  return proto.nest.trait.located.Int32_Indirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.located.Int32_Indirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.located.Int32_Indirect}
 */
proto.nest.trait.located.Int32_Indirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.located.Int32_Indirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.located.Int32_Indirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.located.Int32_Indirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.located.Int32_Indirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.nest.trait.located.Int32_Indirect.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.located.Int32_Indirect} returns this
 */
proto.nest.trait.located.Int32_Indirect.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.nest.trait.located);
