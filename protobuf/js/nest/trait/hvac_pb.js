// source: nest/trait/hvac.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var weave_common_pb = require('../../weave/common_pb.js');
goog.object.extend(proto, weave_common_pb);
goog.exportSymbol('proto.nest.trait.hvac.BackplateInfoTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.DisplaySettingsTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.EcoModeChangeReason', null, global);
goog.exportSymbol('proto.nest.trait.hvac.EcoModeSettingsTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting', null, global);
goog.exportSymbol('proto.nest.trait.hvac.EcoModeState', null, global);
goog.exportSymbol('proto.nest.trait.hvac.EcoModeStateTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.FanControlSettingsTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.FanControlSettingsTrait.FanMode', null, global);
goog.exportSymbol('proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting', null, global);
goog.exportSymbol('proto.nest.trait.hvac.FanControlTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.FanControlTrait.FanSpeedSetting', null, global);
goog.exportSymbol('proto.nest.trait.hvac.Float_Indirect', null, global);
goog.exportSymbol('proto.nest.trait.hvac.HeatCoolMode', null, global);
goog.exportSymbol('proto.nest.trait.hvac.HvacControlTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.HvacControlTrait.HvacState', null, global);
goog.exportSymbol('proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.Int32_Indirect', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsControlMode', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceType', null, global);
goog.exportSymbol('proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.StatusCode', null, global);
goog.exportSymbol('proto.nest.trait.hvac.String_Indirect', null, global);
goog.exportSymbol('proto.nest.trait.hvac.TargetTemperatureSettingsTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint', null, global);
goog.exportSymbol('proto.nest.trait.hvac.TemperatureUnit', null, global);
goog.exportSymbol('proto.nest.trait.hvac.UpdateSource', null, global);
goog.exportSymbol('proto.nest.trait.hvac.UpdateStamp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.TargetTemperatureSettingsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.TargetTemperatureSettingsTrait.displayName = 'proto.nest.trait.hvac.TargetTemperatureSettingsTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.displayName = 'proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.HvacControlTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.HvacControlTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.HvacControlTrait.displayName = 'proto.nest.trait.hvac.HvacControlTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.HvacControlTrait.HvacState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.HvacControlTrait.HvacState.displayName = 'proto.nest.trait.hvac.HvacControlTrait.HvacState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.EcoModeStateTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.EcoModeStateTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.EcoModeStateTrait.displayName = 'proto.nest.trait.hvac.EcoModeStateTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.EcoModeSettingsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.EcoModeSettingsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.EcoModeSettingsTrait.displayName = 'proto.nest.trait.hvac.EcoModeSettingsTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.displayName = 'proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.DisplaySettingsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.DisplaySettingsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.DisplaySettingsTrait.displayName = 'proto.nest.trait.hvac.DisplaySettingsTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.FanControlSettingsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.FanControlSettingsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.FanControlSettingsTrait.displayName = 'proto.nest.trait.hvac.FanControlSettingsTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.FanControlTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.FanControlTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.FanControlTrait.displayName = 'proto.nest.trait.hvac.FanControlTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.BackplateInfoTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.BackplateInfoTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.BackplateInfoTrait.displayName = 'proto.nest.trait.hvac.BackplateInfoTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.displayName = 'proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.repeatedFields_, null);
};
goog.inherits(proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.displayName = 'proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.displayName = 'proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.repeatedFields_, null);
};
goog.inherits(proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.displayName = 'proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.displayName = 'proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.displayName = 'proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.displayName = 'proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.displayName = 'proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.displayName = 'proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.displayName = 'proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.displayName = 'proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.UpdateStamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.UpdateStamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.UpdateStamp.displayName = 'proto.nest.trait.hvac.UpdateStamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.String_Indirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.String_Indirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.String_Indirect.displayName = 'proto.nest.trait.hvac.String_Indirect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.Float_Indirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.Float_Indirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.Float_Indirect.displayName = 'proto.nest.trait.hvac.Float_Indirect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.Int32_Indirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.Int32_Indirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.Int32_Indirect.displayName = 'proto.nest.trait.hvac.Int32_Indirect';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.TargetTemperatureSettingsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    settings: (f = msg.getSettings()) && proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.toObject(includeInstance, f),
    active: (f = msg.getActive()) && proto.nest.trait.hvac.Int32_Indirect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.TargetTemperatureSettingsTrait;
  return proto.nest.trait.hvac.TargetTemperatureSettingsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint;
      reader.readMessage(value,proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    case 2:
      var value = new proto.nest.trait.hvac.Int32_Indirect;
      reader.readMessage(value,proto.nest.trait.hvac.Int32_Indirect.deserializeBinaryFromReader);
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.TargetTemperatureSettingsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.serializeBinaryToWriter
    );
  }
  f = message.getActive();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nest.trait.hvac.Int32_Indirect.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    hvacMode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetTemperatureHeat: (f = msg.getTargetTemperatureHeat()) && proto.nest.trait.hvac.Float_Indirect.toObject(includeInstance, f),
    targetTemperatureCool: (f = msg.getTargetTemperatureCool()) && proto.nest.trait.hvac.Float_Indirect.toObject(includeInstance, f),
    updateInfo: (f = msg.getUpdateInfo()) && proto.nest.trait.hvac.UpdateStamp.toObject(includeInstance, f),
    originalUpdateInfo: (f = msg.getOriginalUpdateInfo()) && proto.nest.trait.hvac.UpdateStamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint;
  return proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.HeatCoolMode} */ (reader.readEnum());
      msg.setHvacMode(value);
      break;
    case 4:
      var value = new proto.nest.trait.hvac.Float_Indirect;
      reader.readMessage(value,proto.nest.trait.hvac.Float_Indirect.deserializeBinaryFromReader);
      msg.setTargetTemperatureHeat(value);
      break;
    case 5:
      var value = new proto.nest.trait.hvac.Float_Indirect;
      reader.readMessage(value,proto.nest.trait.hvac.Float_Indirect.deserializeBinaryFromReader);
      msg.setTargetTemperatureCool(value);
      break;
    case 6:
      var value = new proto.nest.trait.hvac.UpdateStamp;
      reader.readMessage(value,proto.nest.trait.hvac.UpdateStamp.deserializeBinaryFromReader);
      msg.setUpdateInfo(value);
      break;
    case 7:
      var value = new proto.nest.trait.hvac.UpdateStamp;
      reader.readMessage(value,proto.nest.trait.hvac.UpdateStamp.deserializeBinaryFromReader);
      msg.setOriginalUpdateInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHvacMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTargetTemperatureHeat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nest.trait.hvac.Float_Indirect.serializeBinaryToWriter
    );
  }
  f = message.getTargetTemperatureCool();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nest.trait.hvac.Float_Indirect.serializeBinaryToWriter
    );
  }
  f = message.getUpdateInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.nest.trait.hvac.UpdateStamp.serializeBinaryToWriter
    );
  }
  f = message.getOriginalUpdateInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.nest.trait.hvac.UpdateStamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional HeatCoolMode hvac_mode = 1;
 * @return {!proto.nest.trait.hvac.HeatCoolMode}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.getHvacMode = function() {
  return /** @type {!proto.nest.trait.hvac.HeatCoolMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nest.trait.hvac.HeatCoolMode} value
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} returns this
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.setHvacMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Float_Indirect target_temperature_heat = 4;
 * @return {?proto.nest.trait.hvac.Float_Indirect}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.getTargetTemperatureHeat = function() {
  return /** @type{?proto.nest.trait.hvac.Float_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.Float_Indirect, 4));
};


/**
 * @param {?proto.nest.trait.hvac.Float_Indirect|undefined} value
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} returns this
*/
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.setTargetTemperatureHeat = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} returns this
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.clearTargetTemperatureHeat = function() {
  return this.setTargetTemperatureHeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.hasTargetTemperatureHeat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Float_Indirect target_temperature_cool = 5;
 * @return {?proto.nest.trait.hvac.Float_Indirect}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.getTargetTemperatureCool = function() {
  return /** @type{?proto.nest.trait.hvac.Float_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.Float_Indirect, 5));
};


/**
 * @param {?proto.nest.trait.hvac.Float_Indirect|undefined} value
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} returns this
*/
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.setTargetTemperatureCool = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} returns this
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.clearTargetTemperatureCool = function() {
  return this.setTargetTemperatureCool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.hasTargetTemperatureCool = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UpdateStamp update_info = 6;
 * @return {?proto.nest.trait.hvac.UpdateStamp}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.getUpdateInfo = function() {
  return /** @type{?proto.nest.trait.hvac.UpdateStamp} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.UpdateStamp, 6));
};


/**
 * @param {?proto.nest.trait.hvac.UpdateStamp|undefined} value
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} returns this
*/
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.setUpdateInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} returns this
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.clearUpdateInfo = function() {
  return this.setUpdateInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.hasUpdateInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UpdateStamp original_update_info = 7;
 * @return {?proto.nest.trait.hvac.UpdateStamp}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.getOriginalUpdateInfo = function() {
  return /** @type{?proto.nest.trait.hvac.UpdateStamp} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.UpdateStamp, 7));
};


/**
 * @param {?proto.nest.trait.hvac.UpdateStamp|undefined} value
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} returns this
*/
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.setOriginalUpdateInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} returns this
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.clearOriginalUpdateInfo = function() {
  return this.setOriginalUpdateInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint.prototype.hasOriginalUpdateInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TemperatureSetPoint settings = 1;
 * @return {?proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.getSettings = function() {
  return /** @type{?proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint, 1));
};


/**
 * @param {?proto.nest.trait.hvac.TargetTemperatureSettingsTrait.TemperatureSetPoint|undefined} value
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait} returns this
*/
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait} returns this
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Int32_Indirect active = 2;
 * @return {?proto.nest.trait.hvac.Int32_Indirect}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.getActive = function() {
  return /** @type{?proto.nest.trait.hvac.Int32_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.Int32_Indirect, 2));
};


/**
 * @param {?proto.nest.trait.hvac.Int32_Indirect|undefined} value
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait} returns this
*/
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.setActive = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait} returns this
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.clearActive = function() {
  return this.setActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.hasActive = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.HvacControlTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.HvacControlTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.HvacControlTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacControlTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    settings: (f = msg.getSettings()) && proto.nest.trait.hvac.HvacControlTrait.HvacState.toObject(includeInstance, f),
    isDelayed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: (f = msg.getTimestamp()) && proto.nest.trait.hvac.Int32_Indirect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.HvacControlTrait}
 */
proto.nest.trait.hvac.HvacControlTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.HvacControlTrait;
  return proto.nest.trait.hvac.HvacControlTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.HvacControlTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.HvacControlTrait}
 */
proto.nest.trait.hvac.HvacControlTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.trait.hvac.HvacControlTrait.HvacState;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControlTrait.HvacState.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsDelayed(value);
      break;
    case 3:
      var value = new proto.nest.trait.hvac.Int32_Indirect;
      reader.readMessage(value,proto.nest.trait.hvac.Int32_Indirect.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.HvacControlTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.HvacControlTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.HvacControlTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacControlTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nest.trait.hvac.HvacControlTrait.HvacState.serializeBinaryToWriter
    );
  }
  f = message.getIsDelayed();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nest.trait.hvac.Int32_Indirect.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.HvacControlTrait.HvacState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.HvacControlTrait.HvacState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState.toObject = function(includeInstance, msg) {
  var f, obj = {
    isCooling: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isHeating: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.HvacControlTrait.HvacState}
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.HvacControlTrait.HvacState;
  return proto.nest.trait.hvac.HvacControlTrait.HvacState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.HvacControlTrait.HvacState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.HvacControlTrait.HvacState}
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsCooling(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsHeating(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.HvacControlTrait.HvacState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.HvacControlTrait.HvacState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsCooling();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIsHeating();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 is_cooling = 1;
 * @return {number}
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState.prototype.getIsCooling = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.HvacControlTrait.HvacState} returns this
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState.prototype.setIsCooling = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 is_heating = 4;
 * @return {number}
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState.prototype.getIsHeating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.HvacControlTrait.HvacState} returns this
 */
proto.nest.trait.hvac.HvacControlTrait.HvacState.prototype.setIsHeating = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional HvacState settings = 1;
 * @return {?proto.nest.trait.hvac.HvacControlTrait.HvacState}
 */
proto.nest.trait.hvac.HvacControlTrait.prototype.getSettings = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControlTrait.HvacState} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControlTrait.HvacState, 1));
};


/**
 * @param {?proto.nest.trait.hvac.HvacControlTrait.HvacState|undefined} value
 * @return {!proto.nest.trait.hvac.HvacControlTrait} returns this
*/
proto.nest.trait.hvac.HvacControlTrait.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.HvacControlTrait} returns this
 */
proto.nest.trait.hvac.HvacControlTrait.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.HvacControlTrait.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 is_delayed = 2;
 * @return {number}
 */
proto.nest.trait.hvac.HvacControlTrait.prototype.getIsDelayed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.HvacControlTrait} returns this
 */
proto.nest.trait.hvac.HvacControlTrait.prototype.setIsDelayed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Int32_Indirect timestamp = 3;
 * @return {?proto.nest.trait.hvac.Int32_Indirect}
 */
proto.nest.trait.hvac.HvacControlTrait.prototype.getTimestamp = function() {
  return /** @type{?proto.nest.trait.hvac.Int32_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.Int32_Indirect, 3));
};


/**
 * @param {?proto.nest.trait.hvac.Int32_Indirect|undefined} value
 * @return {!proto.nest.trait.hvac.HvacControlTrait} returns this
*/
proto.nest.trait.hvac.HvacControlTrait.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.HvacControlTrait} returns this
 */
proto.nest.trait.hvac.HvacControlTrait.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.HvacControlTrait.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.EcoModeStateTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.EcoModeStateTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeStateTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecoEnabled: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ecomodechangereason: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updateInfo: (f = msg.getUpdateInfo()) && proto.nest.trait.hvac.UpdateStamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.EcoModeStateTrait}
 */
proto.nest.trait.hvac.EcoModeStateTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.EcoModeStateTrait;
  return proto.nest.trait.hvac.EcoModeStateTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.EcoModeStateTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.EcoModeStateTrait}
 */
proto.nest.trait.hvac.EcoModeStateTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.EcoModeState} */ (reader.readEnum());
      msg.setEcoEnabled(value);
      break;
    case 2:
      var value = /** @type {!proto.nest.trait.hvac.EcoModeChangeReason} */ (reader.readEnum());
      msg.setEcomodechangereason(value);
      break;
    case 3:
      var value = new proto.nest.trait.hvac.UpdateStamp;
      reader.readMessage(value,proto.nest.trait.hvac.UpdateStamp.deserializeBinaryFromReader);
      msg.setUpdateInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.EcoModeStateTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.EcoModeStateTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeStateTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcoEnabled();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEcomodechangereason();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUpdateInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nest.trait.hvac.UpdateStamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional EcoModeState eco_enabled = 1;
 * @return {!proto.nest.trait.hvac.EcoModeState}
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.getEcoEnabled = function() {
  return /** @type {!proto.nest.trait.hvac.EcoModeState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nest.trait.hvac.EcoModeState} value
 * @return {!proto.nest.trait.hvac.EcoModeStateTrait} returns this
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.setEcoEnabled = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EcoModeChangeReason ecoModeChangeReason = 2;
 * @return {!proto.nest.trait.hvac.EcoModeChangeReason}
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.getEcomodechangereason = function() {
  return /** @type {!proto.nest.trait.hvac.EcoModeChangeReason} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nest.trait.hvac.EcoModeChangeReason} value
 * @return {!proto.nest.trait.hvac.EcoModeStateTrait} returns this
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.setEcomodechangereason = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional UpdateStamp update_info = 3;
 * @return {?proto.nest.trait.hvac.UpdateStamp}
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.getUpdateInfo = function() {
  return /** @type{?proto.nest.trait.hvac.UpdateStamp} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.UpdateStamp, 3));
};


/**
 * @param {?proto.nest.trait.hvac.UpdateStamp|undefined} value
 * @return {!proto.nest.trait.hvac.EcoModeStateTrait} returns this
*/
proto.nest.trait.hvac.EcoModeStateTrait.prototype.setUpdateInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.EcoModeStateTrait} returns this
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.clearUpdateInfo = function() {
  return this.setUpdateInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.hasUpdateInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.EcoModeSettingsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.EcoModeSettingsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    autoEcoEnabled: jspb.Message.getFieldWithDefault(msg, 1, 0),
    low: (f = msg.getLow()) && proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.toObject(includeInstance, f),
    high: (f = msg.getHigh()) && proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.EcoModeSettingsTrait;
  return proto.nest.trait.hvac.EcoModeSettingsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.EcoModeSettingsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAutoEcoEnabled(value);
      break;
    case 2:
      var value = new proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting;
      reader.readMessage(value,proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.deserializeBinaryFromReader);
      msg.setLow(value);
      break;
    case 3:
      var value = new proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting;
      reader.readMessage(value,proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.deserializeBinaryFromReader);
      msg.setHigh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.EcoModeSettingsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.EcoModeSettingsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAutoEcoEnabled();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLow();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.serializeBinaryToWriter
    );
  }
  f = message.getHigh();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperature: (f = msg.getTemperature()) && proto.nest.trait.hvac.Float_Indirect.toObject(includeInstance, f),
    enabled: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting;
  return proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.trait.hvac.Float_Indirect;
      reader.readMessage(value,proto.nest.trait.hvac.Float_Indirect.deserializeBinaryFromReader);
      msg.setTemperature(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nest.trait.hvac.Float_Indirect.serializeBinaryToWriter
    );
  }
  f = message.getEnabled();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Float_Indirect temperature = 1;
 * @return {?proto.nest.trait.hvac.Float_Indirect}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.prototype.getTemperature = function() {
  return /** @type{?proto.nest.trait.hvac.Float_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.Float_Indirect, 1));
};


/**
 * @param {?proto.nest.trait.hvac.Float_Indirect|undefined} value
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting} returns this
*/
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.prototype.setTemperature = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting} returns this
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.prototype.clearTemperature = function() {
  return this.setTemperature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.prototype.hasTemperature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 enabled = 2;
 * @return {number}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.prototype.getEnabled = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting} returns this
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 auto_eco_enabled = 1;
 * @return {number}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.getAutoEcoEnabled = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait} returns this
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.setAutoEcoEnabled = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EcoTemperatureSetting low = 2;
 * @return {?proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.getLow = function() {
  return /** @type{?proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting, 2));
};


/**
 * @param {?proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting|undefined} value
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait} returns this
*/
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.setLow = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait} returns this
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.clearLow = function() {
  return this.setLow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.hasLow = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EcoTemperatureSetting high = 3;
 * @return {?proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.getHigh = function() {
  return /** @type{?proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting, 3));
};


/**
 * @param {?proto.nest.trait.hvac.EcoModeSettingsTrait.EcoTemperatureSetting|undefined} value
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait} returns this
*/
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.setHigh = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait} returns this
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.clearHigh = function() {
  return this.setHigh(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.hasHigh = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.DisplaySettingsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.DisplaySettingsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.DisplaySettingsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, 0),
    units: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.DisplaySettingsTrait}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.DisplaySettingsTrait;
  return proto.nest.trait.hvac.DisplaySettingsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.DisplaySettingsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.DisplaySettingsTrait}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {!proto.nest.trait.hvac.TemperatureUnit} */ (reader.readEnum());
      msg.setUnits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.DisplaySettingsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.DisplaySettingsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.DisplaySettingsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUnits();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 enabled = 1;
 * @return {number}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.getEnabled = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.DisplaySettingsTrait} returns this
 */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TemperatureUnit units = 2;
 * @return {!proto.nest.trait.hvac.TemperatureUnit}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.getUnits = function() {
  return /** @type {!proto.nest.trait.hvac.TemperatureUnit} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nest.trait.hvac.TemperatureUnit} value
 * @return {!proto.nest.trait.hvac.DisplaySettingsTrait} returns this
 */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.setUnits = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.FanControlSettingsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.FanControlSettingsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.FanControlSettingsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hvacoverridespeed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    schedulespeed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    scheduledutycycle: jspb.Message.getFieldWithDefault(msg, 4, 0),
    schedulestarttime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    scheduleendtime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timerspeed: jspb.Message.getFieldWithDefault(msg, 7, 0),
    fantimertimeout: (f = msg.getFantimertimeout()) && proto.nest.trait.hvac.Int32_Indirect.toObject(includeInstance, f),
    timerduration: (f = msg.getTimerduration()) && proto.nest.trait.hvac.Int32_Indirect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.FanControlSettingsTrait;
  return proto.nest.trait.hvac.FanControlSettingsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.FanControlSettingsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.FanControlSettingsTrait.FanMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting} */ (reader.readEnum());
      msg.setHvacoverridespeed(value);
      break;
    case 3:
      var value = /** @type {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting} */ (reader.readEnum());
      msg.setSchedulespeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScheduledutycycle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSchedulestarttime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScheduleendtime(value);
      break;
    case 7:
      var value = /** @type {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting} */ (reader.readEnum());
      msg.setTimerspeed(value);
      break;
    case 8:
      var value = new proto.nest.trait.hvac.Int32_Indirect;
      reader.readMessage(value,proto.nest.trait.hvac.Int32_Indirect.deserializeBinaryFromReader);
      msg.setFantimertimeout(value);
      break;
    case 9:
      var value = new proto.nest.trait.hvac.Int32_Indirect;
      reader.readMessage(value,proto.nest.trait.hvac.Int32_Indirect.deserializeBinaryFromReader);
      msg.setTimerduration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.FanControlSettingsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.FanControlSettingsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.FanControlSettingsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHvacoverridespeed();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSchedulespeed();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getScheduledutycycle();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSchedulestarttime();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getScheduleendtime();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTimerspeed();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getFantimertimeout();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.nest.trait.hvac.Int32_Indirect.serializeBinaryToWriter
    );
  }
  f = message.getTimerduration();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.nest.trait.hvac.Int32_Indirect.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.FanMode = {
  FAN_MODE_UNSPECIFIED: 0,
  FAN_MODE_AUTO: 1,
  FAN_MODE_CONTINUOUS_ON: 2,
  FAN_MODE_DUTY_CYCLE: 3
};

/**
 * @enum {number}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting = {
  FAN_SPEED_SETTING_UNSPECIFIED: 0,
  FAN_SPEED_SETTING_STAGE1: 1,
  FAN_SPEED_SETTING_STAGE2: 2,
  FAN_SPEED_SETTING_STAGE3: 3,
  FAN_SPEED_SETTING_OFF: 4,
  FAN_SPEED_SETTING_AUTO: 5
};

/**
 * optional FanMode mode = 1;
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait.FanMode}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.getMode = function() {
  return /** @type {!proto.nest.trait.hvac.FanControlSettingsTrait.FanMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nest.trait.hvac.FanControlSettingsTrait.FanMode} value
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FanSpeedSetting hvacOverrideSpeed = 2;
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.getHvacoverridespeed = function() {
  return /** @type {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting} value
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.setHvacoverridespeed = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional FanSpeedSetting scheduleSpeed = 3;
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.getSchedulespeed = function() {
  return /** @type {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting} value
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.setSchedulespeed = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 scheduleDutyCycle = 4;
 * @return {number}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.getScheduledutycycle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.setScheduledutycycle = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 scheduleStartTime = 5;
 * @return {number}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.getSchedulestarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.setSchedulestarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 scheduleEndTime = 6;
 * @return {number}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.getScheduleendtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.setScheduleendtime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional FanSpeedSetting timerSpeed = 7;
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.getTimerspeed = function() {
  return /** @type {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.nest.trait.hvac.FanControlSettingsTrait.FanSpeedSetting} value
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.setTimerspeed = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional Int32_Indirect fanTimerTimeout = 8;
 * @return {?proto.nest.trait.hvac.Int32_Indirect}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.getFantimertimeout = function() {
  return /** @type{?proto.nest.trait.hvac.Int32_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.Int32_Indirect, 8));
};


/**
 * @param {?proto.nest.trait.hvac.Int32_Indirect|undefined} value
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
*/
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.setFantimertimeout = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.clearFantimertimeout = function() {
  return this.setFantimertimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.hasFantimertimeout = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Int32_Indirect timerDuration = 9;
 * @return {?proto.nest.trait.hvac.Int32_Indirect}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.getTimerduration = function() {
  return /** @type{?proto.nest.trait.hvac.Int32_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.Int32_Indirect, 9));
};


/**
 * @param {?proto.nest.trait.hvac.Int32_Indirect|undefined} value
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
*/
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.setTimerduration = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.FanControlSettingsTrait} returns this
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.clearTimerduration = function() {
  return this.setTimerduration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.FanControlSettingsTrait.prototype.hasTimerduration = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.FanControlTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.FanControlTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.FanControlTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.FanControlTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentspeed: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userrequestedfanrunning: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.FanControlTrait}
 */
proto.nest.trait.hvac.FanControlTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.FanControlTrait;
  return proto.nest.trait.hvac.FanControlTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.FanControlTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.FanControlTrait}
 */
proto.nest.trait.hvac.FanControlTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.FanControlTrait.FanSpeedSetting} */ (reader.readEnum());
      msg.setCurrentspeed(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserrequestedfanrunning(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.FanControlTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.FanControlTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.FanControlTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.FanControlTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentspeed();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserrequestedfanrunning();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.nest.trait.hvac.FanControlTrait.FanSpeedSetting = {
  FAN_SPEED_SETTING_UNSPECIFIED: 0,
  FAN_SPEED_SETTING_STAGE1: 1,
  FAN_SPEED_SETTING_STAGE2: 2,
  FAN_SPEED_SETTING_STAGE3: 3,
  FAN_SPEED_SETTING_OFF: 4,
  FAN_SPEED_SETTING_AUTO: 5
};

/**
 * optional FanSpeedSetting currentSpeed = 1;
 * @return {!proto.nest.trait.hvac.FanControlTrait.FanSpeedSetting}
 */
proto.nest.trait.hvac.FanControlTrait.prototype.getCurrentspeed = function() {
  return /** @type {!proto.nest.trait.hvac.FanControlTrait.FanSpeedSetting} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nest.trait.hvac.FanControlTrait.FanSpeedSetting} value
 * @return {!proto.nest.trait.hvac.FanControlTrait} returns this
 */
proto.nest.trait.hvac.FanControlTrait.prototype.setCurrentspeed = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool userRequestedFanRunning = 2;
 * @return {boolean}
 */
proto.nest.trait.hvac.FanControlTrait.prototype.getUserrequestedfanrunning = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nest.trait.hvac.FanControlTrait} returns this
 */
proto.nest.trait.hvac.FanControlTrait.prototype.setUserrequestedfanrunning = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.BackplateInfoTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.BackplateInfoTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.BackplateInfoTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    serialNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    backplateModel: jspb.Message.getFieldWithDefault(msg, 2, ""),
    osVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    osBuildString: jspb.Message.getFieldWithDefault(msg, 4, ""),
    swVersion: jspb.Message.getFieldWithDefault(msg, 5, ""),
    swInfo: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.BackplateInfoTrait}
 */
proto.nest.trait.hvac.BackplateInfoTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.BackplateInfoTrait;
  return proto.nest.trait.hvac.BackplateInfoTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.BackplateInfoTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.BackplateInfoTrait}
 */
proto.nest.trait.hvac.BackplateInfoTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerialNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackplateModel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsBuildString(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.BackplateInfoTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.BackplateInfoTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.BackplateInfoTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerialNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBackplateModel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOsVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOsBuildString();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSwVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSwInfo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string serial_number = 1;
 * @return {string}
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.getSerialNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.trait.hvac.BackplateInfoTrait} returns this
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.setSerialNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string backplate_model = 2;
 * @return {string}
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.getBackplateModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.trait.hvac.BackplateInfoTrait} returns this
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.setBackplateModel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string os_version = 3;
 * @return {string}
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.getOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.trait.hvac.BackplateInfoTrait} returns this
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.setOsVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string os_build_string = 4;
 * @return {string}
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.getOsBuildString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.trait.hvac.BackplateInfoTrait} returns this
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.setOsBuildString = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sw_version = 5;
 * @return {string}
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.getSwVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.trait.hvac.BackplateInfoTrait} returns this
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.setSwVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string sw_info = 6;
 * @return {string}
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.getSwInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.trait.hvac.BackplateInfoTrait} returns this
 */
proto.nest.trait.hvac.BackplateInfoTrait.prototype.setSwInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    canCool: jspb.Message.getFieldWithDefault(msg, 1, 0),
    canHeat: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait}
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait;
  return proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait}
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCanCool(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCanHeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCanCool();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCanHeat();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 can_cool = 1;
 * @return {number}
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.prototype.getCanCool = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait} returns this
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.prototype.setCanCool = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 can_heat = 4;
 * @return {number}
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.prototype.getCanHeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait} returns this
 */
proto.nest.trait.hvac.HvacEquipmentCapabilitiesTrait.prototype.setCanHeat = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcscontrolmode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    activercsselection: (f = msg.getActivercsselection()) && proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.toObject(includeInstance, f),
    associatedrcssensorsList: jspb.Message.toObjectList(msg.getAssociatedrcssensorsList(),
    proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.toObject, includeInstance),
    multisensorsettings: (f = msg.getMultisensorsettings()) && proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait;
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsControlMode} */ (reader.readEnum());
      msg.setRcscontrolmode(value);
      break;
    case 2:
      var value = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection;
      reader.readMessage(value,proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.deserializeBinaryFromReader);
      msg.setActivercsselection(value);
      break;
    case 4:
      var value = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId;
      reader.readMessage(value,proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.deserializeBinaryFromReader);
      msg.addAssociatedrcssensors(value);
      break;
    case 5:
      var value = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings;
      reader.readMessage(value,proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.deserializeBinaryFromReader);
      msg.setMultisensorsettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRcscontrolmode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getActivercsselection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.serializeBinaryToWriter
    );
  }
  f = message.getAssociatedrcssensorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.serializeBinaryToWriter
    );
  }
  f = message.getMultisensorsettings();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsControlMode = {
  RCS_CONTROL_MODE_UNSPECIFIED: 0,
  RCS_CONTROL_MODE_HOLD: 1,
  RCS_CONTROL_MODE_SCHEDULE: 2,
  RCS_CONTROL_MODE_SCHEDULE_OVERRIDE: 3
};

/**
 * @enum {number}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceType = {
  RCS_SOURCE_TYPE_UNSPECIFIED: 0,
  RCS_SOURCE_TYPE_BACKPLATE: 1,
  RCS_SOURCE_TYPE_SINGLE_SENSOR: 2,
  RCS_SOURCE_TYPE_MULTI_SENSOR: 3
};

/**
 * @enum {number}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.StatusCode = {
  STATUS_CODE_UNSPECIFIED: 0,
  STATUS_CODE_SUCCESS: 1,
  STATUS_CODE_FAILURE: 2,
  STATUS_CODE_SENSOR_ALREADY_ASSOCIATED: 4096,
  STATUS_CODE_SENSOR_LIMIT_REACHED: 4097,
  STATUS_CODE_SENSOR_NOT_ASSOCIATED: 8192
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: (f = msg.getDeviceid()) && weave_common_pb.ResourceId.toObject(includeInstance, f),
    vendorid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    productid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId;
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new weave_common_pb.ResourceId;
      reader.readMessage(value,weave_common_pb.ResourceId.deserializeBinaryFromReader);
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVendorid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProductid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      weave_common_pb.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getVendorid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getProductid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional weave.common.ResourceId deviceId = 1;
 * @return {?proto.weave.common.ResourceId}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.prototype.getDeviceid = function() {
  return /** @type{?proto.weave.common.ResourceId} */ (
    jspb.Message.getWrapperField(this, weave_common_pb.ResourceId, 1));
};


/**
 * @param {?proto.weave.common.ResourceId|undefined} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId} returns this
*/
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.prototype.setDeviceid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.prototype.clearDeviceid = function() {
  return this.setDeviceid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 vendorId = 2;
 * @return {number}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.prototype.getVendorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.prototype.setVendorid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 productId = 3;
 * @return {number}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.prototype.getProductid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId.prototype.setProductid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    multisensorenabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    multisensorgroupList: jspb.Message.toObjectList(msg.getMultisensorgroupList(),
    weave_common_pb.ResourceId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings;
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMultisensorenabled(value);
      break;
    case 2:
      var value = new weave_common_pb.ResourceId;
      reader.readMessage(value,weave_common_pb.ResourceId.deserializeBinaryFromReader);
      msg.addMultisensorgroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMultisensorenabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMultisensorgroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      weave_common_pb.ResourceId.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool multiSensorEnabled = 1;
 * @return {boolean}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.prototype.getMultisensorenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.prototype.setMultisensorenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated weave.common.ResourceId multiSensorGroup = 2;
 * @return {!Array<!proto.weave.common.ResourceId>}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.prototype.getMultisensorgroupList = function() {
  return /** @type{!Array<!proto.weave.common.ResourceId>} */ (
    jspb.Message.getRepeatedWrapperField(this, weave_common_pb.ResourceId, 2));
};


/**
 * @param {!Array<!proto.weave.common.ResourceId>} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings} returns this
*/
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.prototype.setMultisensorgroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.weave.common.ResourceId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.weave.common.ResourceId}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.prototype.addMultisensorgroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.weave.common.ResourceId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings.prototype.clearMultisensorgroupList = function() {
  return this.setMultisensorgroupList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcssourcetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    activercssensor: (f = msg.getActivercssensor()) && weave_common_pb.ResourceId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection;
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceType} */ (reader.readEnum());
      msg.setRcssourcetype(value);
      break;
    case 2:
      var value = new weave_common_pb.ResourceId;
      reader.readMessage(value,weave_common_pb.ResourceId.deserializeBinaryFromReader);
      msg.setActivercssensor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRcssourcetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getActivercssensor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      weave_common_pb.ResourceId.serializeBinaryToWriter
    );
  }
};


/**
 * optional RcsSourceType rcsSourceType = 1;
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceType}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.prototype.getRcssourcetype = function() {
  return /** @type {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceType} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.prototype.setRcssourcetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional weave.common.ResourceId activeRcsSensor = 2;
 * @return {?proto.weave.common.ResourceId}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.prototype.getActivercssensor = function() {
  return /** @type{?proto.weave.common.ResourceId} */ (
    jspb.Message.getWrapperField(this, weave_common_pb.ResourceId, 2));
};


/**
 * @param {?proto.weave.common.ResourceId|undefined} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection} returns this
*/
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.prototype.setActivercssensor = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.prototype.clearActivercssensor = function() {
  return this.setActivercssensor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.prototype.hasActivercssensor = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.toObject = function(includeInstance, msg) {
  var f, obj = {
    rcsselection: (f = msg.getRcsselection()) && proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.toObject(includeInstance, f),
    startsecondsinday: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endsecondsinday: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval;
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection;
      reader.readMessage(value,proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.deserializeBinaryFromReader);
      msg.setRcsselection(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartsecondsinday(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndsecondsinday(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRcsselection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection.serializeBinaryToWriter
    );
  }
  f = message.getStartsecondsinday();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEndsecondsinday();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional RcsSourceSelection rcsSelection = 1;
 * @return {?proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.prototype.getRcsselection = function() {
  return /** @type{?proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection, 1));
};


/**
 * @param {?proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection|undefined} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval} returns this
*/
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.prototype.setRcsselection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.prototype.clearRcsselection = function() {
  return this.setRcsselection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.prototype.hasRcsselection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 startSecondsInDay = 2;
 * @return {number}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.prototype.getStartsecondsinday = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.prototype.setStartsecondsinday = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 endSecondsInDay = 3;
 * @return {number}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.prototype.getEndsecondsinday = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.prototype.setEndsecondsinday = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    intervalsMap: (f = msg.getIntervalsMap()) ? f.toObject(includeInstance, proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule;
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getIntervalsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.deserializeBinaryFromReader, 0, new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntervalsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval.serializeBinaryToWriter);
  }
};


/**
 * map<uint32, RcsInterval> intervals = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval>}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.prototype.getIntervalsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsInterval));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSchedule.prototype.clearIntervalsMap = function() {
  this.getIntervalsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceid: (f = msg.getResourceid()) && weave_common_pb.ResourceId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest;
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new weave_common_pb.ResourceId;
      reader.readMessage(value,weave_common_pb.ResourceId.deserializeBinaryFromReader);
      msg.setResourceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      weave_common_pb.ResourceId.serializeBinaryToWriter
    );
  }
};


/**
 * optional weave.common.ResourceId resourceId = 1;
 * @return {?proto.weave.common.ResourceId}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.prototype.getResourceid = function() {
  return /** @type{?proto.weave.common.ResourceId} */ (
    jspb.Message.getWrapperField(this, weave_common_pb.ResourceId, 1));
};


/**
 * @param {?proto.weave.common.ResourceId|undefined} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest} returns this
*/
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.prototype.setResourceid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.prototype.clearResourceid = function() {
  return this.setResourceid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorRequest.prototype.hasResourceid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse;
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.StatusCode} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional StatusCode status = 1;
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.StatusCode}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.prototype.getStatus = function() {
  return /** @type {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.StatusCode} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.AssociateRcsSensorResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceid: (f = msg.getResourceid()) && weave_common_pb.ResourceId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest;
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new weave_common_pb.ResourceId;
      reader.readMessage(value,weave_common_pb.ResourceId.deserializeBinaryFromReader);
      msg.setResourceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      weave_common_pb.ResourceId.serializeBinaryToWriter
    );
  }
};


/**
 * optional weave.common.ResourceId resourceId = 1;
 * @return {?proto.weave.common.ResourceId}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.prototype.getResourceid = function() {
  return /** @type{?proto.weave.common.ResourceId} */ (
    jspb.Message.getWrapperField(this, weave_common_pb.ResourceId, 1));
};


/**
 * @param {?proto.weave.common.ResourceId|undefined} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest} returns this
*/
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.prototype.setResourceid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.prototype.clearResourceid = function() {
  return this.setResourceid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorRequest.prototype.hasResourceid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse;
  return proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.StatusCode} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional StatusCode status = 1;
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.StatusCode}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.prototype.getStatus = function() {
  return /** @type {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.StatusCode} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.DissociateRcsSensorResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RcsControlMode rcsControlMode = 1;
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsControlMode}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.getRcscontrolmode = function() {
  return /** @type {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsControlMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsControlMode} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.setRcscontrolmode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RcsSourceSelection activeRcsSelection = 2;
 * @return {?proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.getActivercsselection = function() {
  return /** @type{?proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection, 2));
};


/**
 * @param {?proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSourceSelection|undefined} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait} returns this
*/
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.setActivercsselection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.clearActivercsselection = function() {
  return this.setActivercsselection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.hasActivercsselection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated RcsSensorId associatedRcsSensors = 4;
 * @return {!Array<!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId>}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.getAssociatedrcssensorsList = function() {
  return /** @type{!Array<!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId, 4));
};


/**
 * @param {!Array<!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId>} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait} returns this
*/
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.setAssociatedrcssensorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.addAssociatedrcssensors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.RcsSensorId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.clearAssociatedrcssensorsList = function() {
  return this.setAssociatedrcssensorsList([]);
};


/**
 * optional MultiSensorSettings multiSensorSettings = 5;
 * @return {?proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.getMultisensorsettings = function() {
  return /** @type{?proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings, 5));
};


/**
 * @param {?proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.MultiSensorSettings|undefined} value
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait} returns this
*/
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.setMultisensorsettings = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait} returns this
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.clearMultisensorsettings = function() {
  return this.setMultisensorsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.RemoteComfortSensingSettingsTrait.prototype.hasMultisensorsettings = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.UpdateStamp.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.UpdateStamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.UpdateStamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.UpdateStamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateSource: jspb.Message.getFieldWithDefault(msg, 1, 0),
    updatedBy: (f = msg.getUpdatedBy()) && proto.nest.trait.hvac.String_Indirect.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && proto.nest.trait.hvac.Int32_Indirect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.UpdateStamp}
 */
proto.nest.trait.hvac.UpdateStamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.UpdateStamp;
  return proto.nest.trait.hvac.UpdateStamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.UpdateStamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.UpdateStamp}
 */
proto.nest.trait.hvac.UpdateStamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.UpdateSource} */ (reader.readEnum());
      msg.setUpdateSource(value);
      break;
    case 2:
      var value = new proto.nest.trait.hvac.String_Indirect;
      reader.readMessage(value,proto.nest.trait.hvac.String_Indirect.deserializeBinaryFromReader);
      msg.setUpdatedBy(value);
      break;
    case 3:
      var value = new proto.nest.trait.hvac.Int32_Indirect;
      reader.readMessage(value,proto.nest.trait.hvac.Int32_Indirect.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.UpdateStamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.UpdateStamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.UpdateStamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.UpdateStamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdateSource();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUpdatedBy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nest.trait.hvac.String_Indirect.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nest.trait.hvac.Int32_Indirect.serializeBinaryToWriter
    );
  }
};


/**
 * optional UpdateSource update_source = 1;
 * @return {!proto.nest.trait.hvac.UpdateSource}
 */
proto.nest.trait.hvac.UpdateStamp.prototype.getUpdateSource = function() {
  return /** @type {!proto.nest.trait.hvac.UpdateSource} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nest.trait.hvac.UpdateSource} value
 * @return {!proto.nest.trait.hvac.UpdateStamp} returns this
 */
proto.nest.trait.hvac.UpdateStamp.prototype.setUpdateSource = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional String_Indirect updated_by = 2;
 * @return {?proto.nest.trait.hvac.String_Indirect}
 */
proto.nest.trait.hvac.UpdateStamp.prototype.getUpdatedBy = function() {
  return /** @type{?proto.nest.trait.hvac.String_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.String_Indirect, 2));
};


/**
 * @param {?proto.nest.trait.hvac.String_Indirect|undefined} value
 * @return {!proto.nest.trait.hvac.UpdateStamp} returns this
*/
proto.nest.trait.hvac.UpdateStamp.prototype.setUpdatedBy = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.UpdateStamp} returns this
 */
proto.nest.trait.hvac.UpdateStamp.prototype.clearUpdatedBy = function() {
  return this.setUpdatedBy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.UpdateStamp.prototype.hasUpdatedBy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Int32_Indirect timestamp = 3;
 * @return {?proto.nest.trait.hvac.Int32_Indirect}
 */
proto.nest.trait.hvac.UpdateStamp.prototype.getTimestamp = function() {
  return /** @type{?proto.nest.trait.hvac.Int32_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.Int32_Indirect, 3));
};


/**
 * @param {?proto.nest.trait.hvac.Int32_Indirect|undefined} value
 * @return {!proto.nest.trait.hvac.UpdateStamp} returns this
*/
proto.nest.trait.hvac.UpdateStamp.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.trait.hvac.UpdateStamp} returns this
 */
proto.nest.trait.hvac.UpdateStamp.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.UpdateStamp.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.String_Indirect.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.String_Indirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.String_Indirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.String_Indirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.String_Indirect}
 */
proto.nest.trait.hvac.String_Indirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.String_Indirect;
  return proto.nest.trait.hvac.String_Indirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.String_Indirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.String_Indirect}
 */
proto.nest.trait.hvac.String_Indirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.String_Indirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.String_Indirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.String_Indirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.String_Indirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.nest.trait.hvac.String_Indirect.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.trait.hvac.String_Indirect} returns this
 */
proto.nest.trait.hvac.String_Indirect.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.Float_Indirect.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.Float_Indirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.Float_Indirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.Float_Indirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.Float_Indirect}
 */
proto.nest.trait.hvac.Float_Indirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.Float_Indirect;
  return proto.nest.trait.hvac.Float_Indirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.Float_Indirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.Float_Indirect}
 */
proto.nest.trait.hvac.Float_Indirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.Float_Indirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.Float_Indirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.Float_Indirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.Float_Indirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.nest.trait.hvac.Float_Indirect.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.Float_Indirect} returns this
 */
proto.nest.trait.hvac.Float_Indirect.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.Int32_Indirect.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.Int32_Indirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.Int32_Indirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.Int32_Indirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.Int32_Indirect}
 */
proto.nest.trait.hvac.Int32_Indirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.Int32_Indirect;
  return proto.nest.trait.hvac.Int32_Indirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.Int32_Indirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.Int32_Indirect}
 */
proto.nest.trait.hvac.Int32_Indirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.Int32_Indirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.Int32_Indirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.Int32_Indirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.Int32_Indirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.nest.trait.hvac.Int32_Indirect.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nest.trait.hvac.Int32_Indirect} returns this
 */
proto.nest.trait.hvac.Int32_Indirect.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.nest.trait.hvac.HeatCoolMode = {
  INVALID_0_HCM: 0,
  HEAT: 1,
  COOL: 2,
  RANGE: 3
};

/**
 * @enum {number}
 */
proto.nest.trait.hvac.EcoModeState = {
  INVALID_0_ECM: 0,
  OFF: 1,
  ON: 2
};

/**
 * @enum {number}
 */
proto.nest.trait.hvac.EcoModeChangeReason = {
  ECO_MODE_CHANGE_REASON_UNSPECIFIED: 0,
  ECO_MODE_CHANGE_REASON_MANUAL: 1,
  ECO_MODE_CHANGE_REASON_STRUCTURE_MODE: 2,
  ECO_MODE_CHANGE_REASON_OCCUPANCY: 3,
  ECO_MODE_CHANGE_REASON_TEMPERATURE: 4,
  ECO_MODE_CHANGE_REASON_FEATURE_ENABLE: 5
};

/**
 * @enum {number}
 */
proto.nest.trait.hvac.UpdateSource = {
  INVALID_0_US: 0,
  INVALID_1: 1,
  INVALID_2: 2,
  DEVICE: 3,
  INVALID_4: 4,
  USER: 5
};

/**
 * @enum {number}
 */
proto.nest.trait.hvac.TemperatureUnit = {
  INVALID_0_TU: 0,
  DEGREES_C: 1,
  DEGREES_F: 2
};

goog.object.extend(exports, proto.nest.trait.hvac);
