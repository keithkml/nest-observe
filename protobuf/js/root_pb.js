// source: root.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var nest_trait_hvac_pb = require('./nest/trait/hvac_pb.js');
goog.object.extend(proto, nest_trait_hvac_pb);
var nest_trait_sensor_pb = require('./nest/trait/sensor_pb.js');
goog.object.extend(proto, nest_trait_sensor_pb);
var nest_trait_structure_pb = require('./nest/trait/structure_pb.js');
goog.object.extend(proto, nest_trait_structure_pb);
var weave_trait_peerdevices_pb = require('./weave/trait/peerdevices_pb.js');
goog.object.extend(proto, weave_trait_peerdevices_pb);
var nest_trait_located_pb = require('./nest/trait/located_pb.js');
goog.object.extend(proto, nest_trait_located_pb);
var weave_trait_description_pb = require('./weave/trait/description_pb.js');
goog.object.extend(proto, weave_trait_description_pb);
var nest_trait_user_pb = require('./nest/trait/user_pb.js');
goog.object.extend(proto, nest_trait_user_pb);
var weave_trait_heartbeat_pb = require('./weave/trait/heartbeat_pb.js');
goog.object.extend(proto, weave_trait_heartbeat_pb);
var weave_common_pb = require('./weave/common_pb.js');
goog.object.extend(proto, weave_common_pb);
var weave_trait_security_pb = require('./weave/trait/security_pb.js');
goog.object.extend(proto, weave_trait_security_pb);
var weave_trait_power_pb = require('./weave/trait/power_pb.js');
goog.object.extend(proto, weave_trait_power_pb);
var nest_trait_security_pb = require('./nest/trait/security_pb.js');
goog.object.extend(proto, nest_trait_security_pb);
var nest_trait_detector_pb = require('./nest/trait/detector_pb.js');
goog.object.extend(proto, nest_trait_detector_pb);
var nest_messages_pb = require('./nest/messages_pb.js');
goog.object.extend(proto, nest_messages_pb);
var nestlabs_gateway_v1_pb = require('./nestlabs/gateway/v1_pb.js');
goog.object.extend(proto, nestlabs_gateway_v1_pb);
var rpc_pb = require('./rpc_pb.js');
goog.object.extend(proto, rpc_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.nest.rpc.DynamicProp_Indirect', null, global);
goog.exportSymbol('proto.nest.rpc.NestMessage', null, global);
goog.exportSymbol('proto.nest.rpc.ObjectIdPair', null, global);
goog.exportSymbol('proto.nest.rpc.StreamBody', null, global);
goog.exportSymbol('proto.nest.rpc.TraitGetProperty', null, global);
goog.exportSymbol('proto.nest.rpc.TraitSetProperty', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.rpc.ObjectIdPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.rpc.ObjectIdPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.rpc.ObjectIdPair.displayName = 'proto.nest.rpc.ObjectIdPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.rpc.DynamicProp_Indirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.rpc.DynamicProp_Indirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.rpc.DynamicProp_Indirect.displayName = 'proto.nest.rpc.DynamicProp_Indirect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.rpc.TraitGetProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.rpc.TraitGetProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.rpc.TraitGetProperty.displayName = 'proto.nest.rpc.TraitGetProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.rpc.TraitSetProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.rpc.TraitSetProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.rpc.TraitSetProperty.displayName = 'proto.nest.rpc.TraitSetProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.rpc.NestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nest.rpc.NestMessage.repeatedFields_, null);
};
goog.inherits(proto.nest.rpc.NestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.rpc.NestMessage.displayName = 'proto.nest.rpc.NestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.rpc.StreamBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nest.rpc.StreamBody.repeatedFields_, null);
};
goog.inherits(proto.nest.rpc.StreamBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.rpc.StreamBody.displayName = 'proto.nest.rpc.StreamBody';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.rpc.ObjectIdPair.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.rpc.ObjectIdPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.rpc.ObjectIdPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.ObjectIdPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.rpc.ObjectIdPair}
 */
proto.nest.rpc.ObjectIdPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.rpc.ObjectIdPair;
  return proto.nest.rpc.ObjectIdPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.rpc.ObjectIdPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.rpc.ObjectIdPair}
 */
proto.nest.rpc.ObjectIdPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.rpc.ObjectIdPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.rpc.ObjectIdPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.rpc.ObjectIdPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.ObjectIdPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nest.rpc.ObjectIdPair.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.rpc.ObjectIdPair} returns this
 */
proto.nest.rpc.ObjectIdPair.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.nest.rpc.ObjectIdPair.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.rpc.ObjectIdPair} returns this
 */
proto.nest.rpc.ObjectIdPair.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string uuid = 3;
 * @return {string}
 */
proto.nest.rpc.ObjectIdPair.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nest.rpc.ObjectIdPair} returns this
 */
proto.nest.rpc.ObjectIdPair.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.rpc.DynamicProp_Indirect.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.rpc.DynamicProp_Indirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.rpc.DynamicProp_Indirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.DynamicProp_Indirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    property: (f = msg.getProperty()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.rpc.DynamicProp_Indirect}
 */
proto.nest.rpc.DynamicProp_Indirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.rpc.DynamicProp_Indirect;
  return proto.nest.rpc.DynamicProp_Indirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.rpc.DynamicProp_Indirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.rpc.DynamicProp_Indirect}
 */
proto.nest.rpc.DynamicProp_Indirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.rpc.DynamicProp_Indirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.rpc.DynamicProp_Indirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.rpc.DynamicProp_Indirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.DynamicProp_Indirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any property = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.nest.rpc.DynamicProp_Indirect.prototype.getProperty = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.nest.rpc.DynamicProp_Indirect} returns this
*/
proto.nest.rpc.DynamicProp_Indirect.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.rpc.DynamicProp_Indirect} returns this
 */
proto.nest.rpc.DynamicProp_Indirect.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.rpc.DynamicProp_Indirect.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.rpc.TraitGetProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.rpc.TraitGetProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.rpc.TraitGetProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.TraitGetProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    object: (f = msg.getObject()) && proto.nest.rpc.ObjectIdPair.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.nest.rpc.DynamicProp_Indirect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.rpc.TraitGetProperty}
 */
proto.nest.rpc.TraitGetProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.rpc.TraitGetProperty;
  return proto.nest.rpc.TraitGetProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.rpc.TraitGetProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.rpc.TraitGetProperty}
 */
proto.nest.rpc.TraitGetProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.rpc.ObjectIdPair;
      reader.readMessage(value,proto.nest.rpc.ObjectIdPair.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 3:
      var value = new proto.nest.rpc.DynamicProp_Indirect;
      reader.readMessage(value,proto.nest.rpc.DynamicProp_Indirect.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.rpc.TraitGetProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.rpc.TraitGetProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.rpc.TraitGetProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.TraitGetProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nest.rpc.ObjectIdPair.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nest.rpc.DynamicProp_Indirect.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectIdPair object = 1;
 * @return {?proto.nest.rpc.ObjectIdPair}
 */
proto.nest.rpc.TraitGetProperty.prototype.getObject = function() {
  return /** @type{?proto.nest.rpc.ObjectIdPair} */ (
    jspb.Message.getWrapperField(this, proto.nest.rpc.ObjectIdPair, 1));
};


/**
 * @param {?proto.nest.rpc.ObjectIdPair|undefined} value
 * @return {!proto.nest.rpc.TraitGetProperty} returns this
*/
proto.nest.rpc.TraitGetProperty.prototype.setObject = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.rpc.TraitGetProperty} returns this
 */
proto.nest.rpc.TraitGetProperty.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.rpc.TraitGetProperty.prototype.hasObject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DynamicProp_Indirect data = 3;
 * @return {?proto.nest.rpc.DynamicProp_Indirect}
 */
proto.nest.rpc.TraitGetProperty.prototype.getData = function() {
  return /** @type{?proto.nest.rpc.DynamicProp_Indirect} */ (
    jspb.Message.getWrapperField(this, proto.nest.rpc.DynamicProp_Indirect, 3));
};


/**
 * @param {?proto.nest.rpc.DynamicProp_Indirect|undefined} value
 * @return {!proto.nest.rpc.TraitGetProperty} returns this
*/
proto.nest.rpc.TraitGetProperty.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.rpc.TraitGetProperty} returns this
 */
proto.nest.rpc.TraitGetProperty.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.rpc.TraitGetProperty.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.rpc.TraitSetProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.rpc.TraitSetProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.rpc.TraitSetProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.TraitSetProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    object: (f = msg.getObject()) && proto.nest.rpc.ObjectIdPair.toObject(includeInstance, f),
    property: (f = msg.getProperty()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.rpc.TraitSetProperty}
 */
proto.nest.rpc.TraitSetProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.rpc.TraitSetProperty;
  return proto.nest.rpc.TraitSetProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.rpc.TraitSetProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.rpc.TraitSetProperty}
 */
proto.nest.rpc.TraitSetProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.rpc.ObjectIdPair;
      reader.readMessage(value,proto.nest.rpc.ObjectIdPair.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.rpc.TraitSetProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.rpc.TraitSetProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.rpc.TraitSetProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.TraitSetProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nest.rpc.ObjectIdPair.serializeBinaryToWriter
    );
  }
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectIdPair object = 1;
 * @return {?proto.nest.rpc.ObjectIdPair}
 */
proto.nest.rpc.TraitSetProperty.prototype.getObject = function() {
  return /** @type{?proto.nest.rpc.ObjectIdPair} */ (
    jspb.Message.getWrapperField(this, proto.nest.rpc.ObjectIdPair, 1));
};


/**
 * @param {?proto.nest.rpc.ObjectIdPair|undefined} value
 * @return {!proto.nest.rpc.TraitSetProperty} returns this
*/
proto.nest.rpc.TraitSetProperty.prototype.setObject = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.rpc.TraitSetProperty} returns this
 */
proto.nest.rpc.TraitSetProperty.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.rpc.TraitSetProperty.prototype.hasObject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Any property = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.nest.rpc.TraitSetProperty.prototype.getProperty = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.nest.rpc.TraitSetProperty} returns this
*/
proto.nest.rpc.TraitSetProperty.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.rpc.TraitSetProperty} returns this
 */
proto.nest.rpc.TraitSetProperty.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.rpc.TraitSetProperty.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nest.rpc.NestMessage.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.rpc.NestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.rpc.NestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.rpc.NestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.NestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    setList: jspb.Message.toObjectList(msg.getSetList(),
    proto.nest.rpc.TraitSetProperty.toObject, includeInstance),
    getList: jspb.Message.toObjectList(msg.getGetList(),
    proto.nest.rpc.TraitGetProperty.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.rpc.NestMessage}
 */
proto.nest.rpc.NestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.rpc.NestMessage;
  return proto.nest.rpc.NestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.rpc.NestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.rpc.NestMessage}
 */
proto.nest.rpc.NestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.rpc.TraitSetProperty;
      reader.readMessage(value,proto.nest.rpc.TraitSetProperty.deserializeBinaryFromReader);
      msg.addSet(value);
      break;
    case 3:
      var value = new proto.nest.rpc.TraitGetProperty;
      reader.readMessage(value,proto.nest.rpc.TraitGetProperty.deserializeBinaryFromReader);
      msg.addGet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.rpc.NestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.rpc.NestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.rpc.NestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.NestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nest.rpc.TraitSetProperty.serializeBinaryToWriter
    );
  }
  f = message.getGetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nest.rpc.TraitGetProperty.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TraitSetProperty set = 1;
 * @return {!Array<!proto.nest.rpc.TraitSetProperty>}
 */
proto.nest.rpc.NestMessage.prototype.getSetList = function() {
  return /** @type{!Array<!proto.nest.rpc.TraitSetProperty>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nest.rpc.TraitSetProperty, 1));
};


/**
 * @param {!Array<!proto.nest.rpc.TraitSetProperty>} value
 * @return {!proto.nest.rpc.NestMessage} returns this
*/
proto.nest.rpc.NestMessage.prototype.setSetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nest.rpc.TraitSetProperty=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nest.rpc.TraitSetProperty}
 */
proto.nest.rpc.NestMessage.prototype.addSet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nest.rpc.TraitSetProperty, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nest.rpc.NestMessage} returns this
 */
proto.nest.rpc.NestMessage.prototype.clearSetList = function() {
  return this.setSetList([]);
};


/**
 * repeated TraitGetProperty get = 3;
 * @return {!Array<!proto.nest.rpc.TraitGetProperty>}
 */
proto.nest.rpc.NestMessage.prototype.getGetList = function() {
  return /** @type{!Array<!proto.nest.rpc.TraitGetProperty>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nest.rpc.TraitGetProperty, 3));
};


/**
 * @param {!Array<!proto.nest.rpc.TraitGetProperty>} value
 * @return {!proto.nest.rpc.NestMessage} returns this
*/
proto.nest.rpc.NestMessage.prototype.setGetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nest.rpc.TraitGetProperty=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nest.rpc.TraitGetProperty}
 */
proto.nest.rpc.NestMessage.prototype.addGet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nest.rpc.TraitGetProperty, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nest.rpc.NestMessage} returns this
 */
proto.nest.rpc.NestMessage.prototype.clearGetList = function() {
  return this.setGetList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nest.rpc.StreamBody.repeatedFields_ = [1,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.rpc.StreamBody.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.rpc.StreamBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.rpc.StreamBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.StreamBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageList: jspb.Message.toObjectList(msg.getMessageList(),
    proto.nest.rpc.NestMessage.toObject, includeInstance),
    status: (f = msg.getStatus()) && rpc_pb.Status.toObject(includeInstance, f),
    noopList: msg.getNoopList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.rpc.StreamBody}
 */
proto.nest.rpc.StreamBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.rpc.StreamBody;
  return proto.nest.rpc.StreamBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.rpc.StreamBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.rpc.StreamBody}
 */
proto.nest.rpc.StreamBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.rpc.NestMessage;
      reader.readMessage(value,proto.nest.rpc.NestMessage.deserializeBinaryFromReader);
      msg.addMessage(value);
      break;
    case 2:
      var value = new rpc_pb.Status;
      reader.readMessage(value,rpc_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addNoop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.rpc.StreamBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.rpc.StreamBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.rpc.StreamBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.rpc.StreamBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nest.rpc.NestMessage.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      rpc_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getNoopList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      15,
      f
    );
  }
};


/**
 * repeated NestMessage message = 1;
 * @return {!Array<!proto.nest.rpc.NestMessage>}
 */
proto.nest.rpc.StreamBody.prototype.getMessageList = function() {
  return /** @type{!Array<!proto.nest.rpc.NestMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nest.rpc.NestMessage, 1));
};


/**
 * @param {!Array<!proto.nest.rpc.NestMessage>} value
 * @return {!proto.nest.rpc.StreamBody} returns this
*/
proto.nest.rpc.StreamBody.prototype.setMessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nest.rpc.NestMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nest.rpc.NestMessage}
 */
proto.nest.rpc.StreamBody.prototype.addMessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nest.rpc.NestMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nest.rpc.StreamBody} returns this
 */
proto.nest.rpc.StreamBody.prototype.clearMessageList = function() {
  return this.setMessageList([]);
};


/**
 * optional Status status = 2;
 * @return {?proto.nest.rpc.Status}
 */
proto.nest.rpc.StreamBody.prototype.getStatus = function() {
  return /** @type{?proto.nest.rpc.Status} */ (
    jspb.Message.getWrapperField(this, rpc_pb.Status, 2));
};


/**
 * @param {?proto.nest.rpc.Status|undefined} value
 * @return {!proto.nest.rpc.StreamBody} returns this
*/
proto.nest.rpc.StreamBody.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nest.rpc.StreamBody} returns this
 */
proto.nest.rpc.StreamBody.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.rpc.StreamBody.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated bytes noop = 15;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.nest.rpc.StreamBody.prototype.getNoopList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * repeated bytes noop = 15;
 * This is a type-conversion wrapper around `getNoopList()`
 * @return {!Array<string>}
 */
proto.nest.rpc.StreamBody.prototype.getNoopList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getNoopList()));
};


/**
 * repeated bytes noop = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNoopList()`
 * @return {!Array<!Uint8Array>}
 */
proto.nest.rpc.StreamBody.prototype.getNoopList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getNoopList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.nest.rpc.StreamBody} returns this
 */
proto.nest.rpc.StreamBody.prototype.setNoopList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.nest.rpc.StreamBody} returns this
 */
proto.nest.rpc.StreamBody.prototype.addNoop = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nest.rpc.StreamBody} returns this
 */
proto.nest.rpc.StreamBody.prototype.clearNoopList = function() {
  return this.setNoopList([]);
};


goog.object.extend(exports, proto.nest.rpc);
